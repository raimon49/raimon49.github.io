<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Steel Dragon 14106</title><link>http://raimon49.github.io/</link><description>スチールドラゴンアイシテル</description><lastBuildDate>Tue, 31 Jan 2017 20:23:10 +0900</lastBuildDate><item><title>SemVerを採用したソフトウェアの更新でビルドが壊される時、メジャーバージョン番号を上げなければならない</title><link>http://raimon49.github.io/2017/01/31/must-increment-the-major-version-number.html</link><description>&lt;p&gt;ソフトウェアが&lt;a href="http://semver.org/lang/ja/"&gt;セマンティックバージョニング（以下SemVer）&lt;/a&gt;を採用している時、公開APIの互換性を保たれない変更がされるのであれば、メジャーバージョン番号を上げなければならない。&lt;/p&gt;
&lt;h2&gt;jshint-stylishのケース&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/jshint-stylish"&gt;jshint-stylish&lt;/a&gt;というJavaScriptライブラリでは実際にメジャーバージョン番号が &lt;code&gt;1.y.z&lt;/code&gt; から &lt;code&gt;2.y.z&lt;/code&gt; にインクリメントされた。&lt;/p&gt;
&lt;p&gt;この時の変更は、第三者からのP-Rを受け入れて、ライブラリが提供するコードの大半が &lt;code&gt;stylish.js&lt;/code&gt; から &lt;code&gt;index.js&lt;/code&gt; に移されたものだった（&lt;a href="https://github.com/sindresorhus/jshint-stylish/compare/v1.0.2...2.0.0"&gt;バージョン間の差分&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;変更の結果、jshint-stylishを利用しているユーザーは、次のように利用コードを変更する必要があった。変更しないでバージョンアップした場合は &lt;strong&gt;ビルドが破壊される&lt;/strong&gt; からである。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# jshint-stylish 1.0.2を利用するコード&lt;/span&gt;
$ jshint --reporter&lt;span class="o"&gt;=&lt;/span&gt;node_modules/jshint-stylish/stylish.js file.js

&lt;span class="c1"&gt;# jshint-stylish 2.0.0を利用するコード&lt;/span&gt;
$ jshint --reporter&lt;span class="o"&gt;=&lt;/span&gt;node_modules/jshint-stylish file.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://docs.npmjs.com/getting-started/semantic-versioning"&gt;npmに登録される多くのライブラリではSemVerが採用されており&lt;/a&gt;、利用者は &lt;code&gt;^1.0.0&lt;/code&gt; のように宣言しておくことで &lt;code&gt;1.y.z&lt;/code&gt; のメジャーバージョンをまたがない最新バージョンを安全に使い続けられる。jshint-stylishのように破壊的な変更がメジャーバージョン番号の更新で通知されれば、ライブラリ利用者は慎重にバージョンアップを検討することが可能になる。&lt;/p&gt;
&lt;h2&gt;SemVerを守られないと混乱する&lt;/h2&gt;
&lt;p&gt;よくある勘違いの一つに、次のような理由からメジャーバージョン番号を上げてしまうケースがある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;革新的な新機能が追加された&lt;/li&gt;
&lt;li&gt;APIを保ったままコードを大幅にリファクタリングした&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;確かに商用ソフトウェアでこのようなメジャーバージョンアップが行われることはあるが、&lt;strong&gt;こういった商用ソフトウェアは最初からSemVerを採用していない&lt;/strong&gt;点に注意が必要である。利用者がSemVerを期待している時に、商用ソフトウェアの真似をしてはならない。利用者が混乱するからである。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Tue, 31 Jan 2017 20:23:10 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2017-01-31:/2017/01/31/must-increment-the-major-version-number.html</guid><category>CI</category><category>Node</category></item><item><title>Swift CLI環境におけるTravis CIを利用した継続的Lint</title><link>http://raimon49.github.io/2016/05/05/continuous-lint-at-swift-cli.html</link><description>&lt;p&gt;Xcodeに付属する &lt;code&gt;swift&lt;/code&gt; コマンドを使い、&lt;a href="http://www.sbcr.jp/products/4797386257.html"&gt;『詳解 Swift 改訂版』&lt;/a&gt;のサンプルコードを写経したり、書き換えて動作を確認したりするGitリポジトリを作った。&lt;/p&gt;
&lt;p&gt;せっかくGitHubにホスティングしているので、学習しながら継続的に&lt;a href="https://github.com/realm/SwiftLint"&gt;SwiftLint&lt;/a&gt;で好ましくない書き方を自動検知できると良いのではないかと考えた。&lt;/p&gt;
&lt;h2&gt;成果物&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/raimon49/swift-definitive-guide-2nd-edition-study"&gt;raimon49/swift-definitive-guide-2nd-edition-study&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最低限で必要になるのは次のファイルである。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
&lt;span class="p"&gt;|&lt;/span&gt;-- .swiftlint.yml
&lt;span class="p"&gt;|&lt;/span&gt;-- .travis.yml
&lt;span class="sb"&gt;`&lt;/span&gt;-- install_swiftlint.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;インストールスクリプトの準備&lt;/h2&gt;
&lt;p&gt;Travis CIのビルド環境へSwiftLintを導入する最速の手段は、&lt;a href="https://github.com/realm/SwiftLint/releases"&gt;リリース済みpkgファイル&lt;/a&gt;を取得し、OS Xの &lt;code&gt;installer&lt;/code&gt; コマンドでインストールする方法である。&lt;/p&gt;
&lt;p&gt;よって、次のようなインストールスクリプト &lt;code&gt;install_swiftlint.sh&lt;/code&gt; を準備する。スクリプトファイルには実行権限を付与するようにし、スクリプト中の変数 &lt;code&gt;SWIFTLINT_PKG_URL&lt;/code&gt; は都度でSwiftLintの最新リリースに変えると良い。&lt;/p&gt;
&lt;p&gt;pkgファイルが取得できなかった時は代替手段としてソースコードをcloneしてコンパイルさせるが、時間がかかる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# Installs the SwiftLint package.&lt;/span&gt;
&lt;span class="c1"&gt;# Tries to get the precompiled .pkg file from Github, but if that&lt;/span&gt;
&lt;span class="c1"&gt;# fails just recompiles from source.&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; -e

&lt;span class="nv"&gt;SWIFTLINT_PKG_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/SwiftLint.pkg&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SWIFTLINT_PKG_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://github.com/realm/SwiftLint/releases/download/0.10.0/SwiftLint.pkg&amp;quot;&lt;/span&gt;

wget --output-document&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$SWIFTLINT_PKG_PATH&lt;/span&gt; &lt;span class="nv"&gt;$SWIFTLINT_PKG_URL&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f &lt;span class="nv"&gt;$SWIFTLINT_PKG_PATH&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SwiftLint package exists! Installing it...&amp;quot;&lt;/span&gt;
  sudo installer -pkg &lt;span class="nv"&gt;$SWIFTLINT_PKG_PATH&lt;/span&gt; -target /
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SwiftLint package doesn&amp;#39;t exist. Compiling from source...&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  git clone https://github.com/realm/SwiftLint.git /tmp/SwiftLint &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/SwiftLint &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  git submodule update --init --recursive &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  sudo make install
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;もしpkgファイル経由比でおよそ3倍のインストールに時間を許容できるなら、インストールスクリプトでは単にHomebrew経由で導入する方法もある。メリットとしては、ソースコード取得からのコンパイルと同様に、常に最新のリリース版が利用できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 最新リリースのビルド済みバイナリからインストール&lt;/span&gt;
$ brew update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; brew install swiftlint

&lt;span class="c1"&gt;# 最新のソースコードからコンパイルしてインストール&lt;/span&gt;
$ brew update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; brew install --HEAD swiftlint
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;SwiftLintとTravis CIの設定を追加&lt;/h2&gt;
&lt;p&gt;『詳解 Swift 改訂版』に登場するサンプルコードでは、変数名に1文字の名前やユニコード文字列が多用されており、SwiftLintでエラーとなってしまうため、回避する設定を &lt;code&gt;.swiftlint.yml&lt;/code&gt; として追加した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;disabled_rules:
  - variable_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ここまで準備した内容で &lt;code&gt;git push&lt;/code&gt; される度にSwiftLintでチェックが走るよう、Travis CI側のWeb UIでリポジトリ連携を設定し &lt;code&gt;.travis.yml&lt;/code&gt; を次のような内容で追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;objective&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="n"&gt;osx_image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xcode7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;install_swiftlint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sh&lt;/span&gt;

&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;swiftlint&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://travis-ci.org/raimon49/swift-definitive-guide-2nd-edition-study"&gt;Travis CIでSwiftLintの結果が継続的に確認できるようになった&lt;/a&gt;ら、好ましくないコードスタイルを都度修正し、常にチェック結果がグリーンを保つようにする。&lt;/p&gt;
&lt;h2&gt;参考情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alexplescan.com/posts/2016/03/03/setting-up-swiftlint-on-travis-ci/"&gt;Setting up SwiftLint on Travis CI - Alex Plescan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Thu, 05 May 2016 13:02:17 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2016-05-05:/2016/05/05/continuous-lint-at-swift-cli.html</guid><category>CI</category><category>Swift</category><category>Xcode</category></item><item><title>Swiftで書かれたiOSアプリを実機デバッグ実行時に「image not found」エラーとなる場合の対処</title><link>http://raimon49.github.io/2016/03/20/error-at-swift-app-with-ios-device.html</link><description>&lt;h2&gt;エラー内容&lt;/h2&gt;
&lt;p&gt;Swiftで書かれたコードを含むiOSアプリを、検証用のiOS端末に流し込んで実機デバッグしようとすると、以下のようなエラーが出てクラッシュしてしまう事がある。&lt;/p&gt;
&lt;p&gt;Objective-Cで書かれた既存XcodeプロジェクトにSwiftコードを追加した際にも遭遇する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dyld: Library not loaded: @rpath/libswiftCore.dylib
Referenced from: /private/var/mobile/Containers/Bundle/Application/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/App-Name.app/App-Name
Reason: image not found
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;解決方法&lt;/h2&gt;
&lt;p&gt;確認するポイントとしては2点ある。&lt;/p&gt;
&lt;p&gt;1点目は「Build Settings」-「Build Options」-「Embedded Content Contains Swift Code」を「Yes」に設定する。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Xcode設定画面" src="/images/contains-swift-code.png"&gt;&lt;/p&gt;
&lt;p&gt;2点目は「Build Settings」-「Linking」-「Runpath Search Path」に &lt;code&gt;@executable_path/Frameworks&lt;/code&gt; を追加する。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Xcode設定画面" src="/images/runpath-search-paths.png"&gt;&lt;/p&gt;
&lt;p&gt;これらの設定を行ってからXcodeで再度デバッグ実行すると、iOS端末に流し込んでアプリを起動後にクラッシュが発生することは無くなった。&lt;/p&gt;
&lt;h2&gt;参考情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/26104975/dyld-library-not-loaded-rpath-libswiftcore-dylib-image-not-found"&gt;ios - dyld: Library not loaded: @rpath/libswiftCore.dylib / Image not found - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sun, 20 Mar 2016 13:53:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2016-03-20:/2016/03/20/error-at-swift-app-with-ios-device.html</guid><category>Swift</category><category>Xcode</category><category>iOS</category></item><item><title>OS X El CapitanでNoSleep代替としてInsomniaXで蓋を閉じて自動スリープを防止する</title><link>http://raimon49.github.io/2016/02/17/no-sleep-with-el-capitan.html</link><description>&lt;p&gt;OS XをEl Capitanにアップデートすると、モバイル環境でMacBookの蓋を閉じた時の自動スリープを防止するNoSleep.appが「NoSleep Kernel Extension is not loaded.」というエラーメッセージと共に機能しなくなる。&lt;/p&gt;
&lt;h2&gt;代替としてInsomniaXを導入する&lt;/h2&gt;
&lt;p&gt;インターネットで探すと「古いバージョンのNoSleep.appを入れると使える」といった情報も出て来るが、自分の環境では残念ながら機能しなかった。&lt;/p&gt;
&lt;p&gt;代替として&lt;a href="http://semaja2.net/projects/insomniaxinfo/"&gt;InsomniaX&lt;/a&gt;を導入する事で、希望の動作を実現できた。&lt;/p&gt;
&lt;p&gt;導入方法としては、2016-02-17現在のLatest Versionである&lt;a href="http://insomniax.semaja2.net/InsomniaX-2.1.8.tgz"&gt;InsomniaX-2.1.8&lt;/a&gt;をダウンロードして展開・インストールを行う。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tar zxvf InsomniaX-2.1.8.tgz
$ sudo cp -r InsomniaX.app /Applications
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;インストール完了したらInsomniaX.appを起動し、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「Preferences」 - 「Start to Login」にチェック&lt;/li&gt;
&lt;li&gt;「Disable Lid Sleep」にチェック&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="/images/insomniax-setting.png" alt="InsomniaXの設定例" width="198px" height="301px" style="width: 198px; max-width: 100%; height: auto;"&gt;&lt;/p&gt;
&lt;p&gt;上記のような設定で利用することで、MacBookの蓋を閉じた時の自動スリープを防止したい目的は達成できた。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Wed, 17 Feb 2016 22:29:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2016-02-17:/2016/02/17/no-sleep-with-el-capitan.html</guid><category>Mac</category></item><item><title>CodecovでPythonコードリポジトリのコードカバレッジを継続的に計測する</title><link>http://raimon49.github.io/2016/01/17/continuous-code-coverage-with-codecov.html</link><description>&lt;p&gt;&lt;a href="https://codecov.io"&gt;Codecov&lt;/a&gt;というサービスを利用すると、GitHubにホスティングしているGitリポジトリのコードカバレッジを継続的に計測し、次のようにバッジで表示できる。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/codecov-badge-sample.png" alt="GitHub READMEに埋め込んだ例" width="369px" height="42px" style="width: 369px; max-width: 100%; height: auto;"&gt;&lt;/p&gt;
&lt;p&gt;同種のCode coverage as a Service的なものでは、有名なサービスとして&lt;a href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt;がある。&lt;/p&gt;
&lt;h2&gt;Travis CI連携済みのPythonプロジェクトでCodecovを利用&lt;/h2&gt;
&lt;p&gt;今回は技術書のサンプルコードを写経してコードカバレッジが取得できるようになっており、かつTravis CIでテストが自動的に回るように連携済みである&lt;a href="https://github.com/raimon49/pypro2-unittest-study"&gt;既存のPythonプロジェクト&lt;/a&gt;に対してCodecovとの連携を組み込んでみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# このカバレッジをCodecovで計測したい&lt;/span&gt;
$ py.test --doctest-modules --pep8 -v --cov&lt;span class="o"&gt;=&lt;/span&gt;bankaccount --cov&lt;span class="o"&gt;=&lt;/span&gt;myview --cov&lt;span class="o"&gt;=&lt;/span&gt;utility
----------------------------------------- coverage: platform linux2, python &lt;span class="m"&gt;2&lt;/span&gt;.7.9-final-0 ------------------------------------------
Name             Stmts   Miss  Cover
------------------------------------
bankaccount.py      &lt;span class="m"&gt;29&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;93&lt;/span&gt;%
myview.py           &lt;span class="m"&gt;15&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;    &lt;span class="m"&gt;87&lt;/span&gt;%
utility.py           &lt;span class="m"&gt;5&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="m"&gt;100&lt;/span&gt;%
------------------------------------
TOTAL               &lt;span class="m"&gt;49&lt;/span&gt;      &lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="m"&gt;92&lt;/span&gt;%
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;codecovモジュールの組み込み&lt;/h2&gt;
&lt;p&gt;結論から言うとCodecovサービスと連携してPythonのコードカバレッジを計測するのは非常に簡単で、&lt;a href="https://pypi.python.org/pypi/codecov/1.1.4"&gt;codecovモジュール&lt;/a&gt;をプロジェクトに依存に追加し、Travis CIの &lt;code&gt;after_success&lt;/code&gt; フックで呼ぶようにしておくだけである。&lt;/p&gt;
&lt;p&gt;設定のYAML全体は以下の通り。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r tests-requirements.txt&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;py.test --doctest-modules --pep8 -v --cov=bankaccount --cov=myview --cov=utility&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;after_success&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;codecov&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/raimon49/pypro2-unittest-study/commit/f6a4f95cb3925462683f02c0264bf83b90120f92"&gt;Codecov連携するためのコミット差分&lt;/a&gt;を見ても、ほんの少しの変更で対応できている事が分かる。&lt;/p&gt;
&lt;h2&gt;少ない省力で十分なレポート&lt;/h2&gt;
&lt;p&gt;Codecov連携しているとコミット毎にテストが書かれているステートメントと書かれていないステートメントを&lt;a href="https://codecov.io/github/raimon49/pypro2-unittest-study/bankaccount.py"&gt;シンプルな色分けでレポートしてくれる&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/cover-repost.png" alt="Codecovでのレポート画面" width="487" height="467" style="width: 487px; max-width: 100%; height: auto;"&gt;&lt;/p&gt;
&lt;p&gt;もちろん、Jenkinsでも充実したPluginエコシステムを利用して同様のレポートを取得・表示することは可能だが、個人のコード管理でそこまでCIサーバ運用に手間をかけられないのが実情である。&lt;/p&gt;
&lt;p&gt;これだけの少ない省力で十分なレポートが得られるのであれば、やはり今後はCodecovのようなカジュアルに使えるコードカバレッジ計測サービスが主流になって行くと思われる。&lt;/p&gt;
&lt;p&gt;なお本記事の冒頭に貼った画像で依存パッケージの更新状況を表している真ん中のバッジは&lt;a href="https://requires.io/"&gt;Requires.io&lt;/a&gt;というサービスで、同様のサービスとして&lt;a href="https://gemnasium.com/"&gt;Gemnasium&lt;/a&gt;が有名だが、Requires.ioの方が &lt;code&gt;git push&lt;/code&gt; した後に即時反映してくれるなど便利な印象である。PythonプロジェクトであればGemnasiumよりも良い選択肢になる。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sun, 17 Jan 2016 13:56:18 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2016-01-17:/2016/01/17/continuous-code-coverage-with-codecov.html</guid><category>CI</category><category>GitHub</category><category>Python</category></item><item><title>Pythonでオブジェクトを返す関数/メソッドをdoctestする</title><link>http://raimon49.github.io/2015/11/18/doctest-with-return-object.html</link><description>&lt;h2&gt;doctestの使い方&lt;/h2&gt;
&lt;p&gt;Pythonにはdoctestと呼ばれる仕組みが標準で備わっている。&lt;/p&gt;
&lt;p&gt;docstringと呼ばれるドキュメンテーション文字列フォーマットの中に、関数やメソッドの使い方を示す式と期待される戻り値を書いておくと、それを実行してテストできる。&lt;/p&gt;
&lt;p&gt;例えば &lt;code&gt;calc.py&lt;/code&gt; として次のように関数が定義されているとする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    引数xとyを加算した結果を返す&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;gt;&amp;gt;&amp;gt; add(2, 3)&lt;/span&gt;
&lt;span class="sd"&gt;        5&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;テストランナー系のライブラリに頼らず素直にdoctestを実行すると、次のような結果が得られる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m doctest -v calc.py
Trying:
    add&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Expecting:
    &lt;span class="m"&gt;5&lt;/span&gt;
ok
&lt;span class="m"&gt;1&lt;/span&gt; items had no tests:
    calc
&lt;span class="m"&gt;1&lt;/span&gt; items passed all tests:
   &lt;span class="m"&gt;1&lt;/span&gt; tests in calc.add
&lt;span class="m"&gt;1&lt;/span&gt; tests in &lt;span class="m"&gt;2&lt;/span&gt; items.
&lt;span class="m"&gt;1&lt;/span&gt; passed and &lt;span class="m"&gt;0&lt;/span&gt; failed.
Test passed.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;辞書オブジェクトやインスタンスオブジェクトを返す関数をdoctestしたい&lt;/h2&gt;
&lt;p&gt;辞書オブジェクトやインスタンスオブジェクトを返す関数をdoctestしたい時はどうするのが良いか。&lt;/p&gt;
&lt;p&gt;例えばユニットテストは高速に実行したいため、外部リソースを取得する部分をモック化する事が良くある。このモック化のために、以下のようなヘルパー関数を作っておくとする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PropertyMock&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mocked_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PropertyMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mocked body&amp;#39;&lt;/span&gt;
    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;


&lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;urllib2.urlopen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_use_some_resouce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mocked_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TargetClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mocked body&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで関数 &lt;code&gt;test_use_some_resouce&lt;/code&gt; は、モック化されたレスポンスオブジェクトを使って高速にテストできるようになった。&lt;/p&gt;
&lt;p&gt;ヘルパー関数 &lt;code&gt;mocked_response&lt;/code&gt; 自身もdoctestを使ってテストしたいが、この関数はスカラ値ではなくモック化された &lt;code&gt;code&lt;/code&gt; プロパティと &lt;code&gt;read&lt;/code&gt; メソッドを持つオブジェクトを返す。&lt;/p&gt;
&lt;h2&gt;doctestの式で比較しTrue/Falseを実行結果として書く&lt;/h2&gt;
&lt;p&gt;オブジェクトを返す関数のdoctest方法は、ずばり&lt;a href="http://docs.python.jp/2/library/doctest.html"&gt;doctestモジュール 25.2.3.6. 注意&lt;/a&gt;に書かれている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; で実行される式の行には辞書オブジェクトやインスタンスオブジェクトの持つプロパティとの比較を書き、期待する出力の行には &lt;code&gt;True/False&lt;/code&gt; を書いておけば良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mocked_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Return mocked response instance&lt;/span&gt;

&lt;span class="sd"&gt;        &amp;gt;&amp;gt;&amp;gt; mocked_response(status_code=404).code == 404&lt;/span&gt;
&lt;span class="sd"&gt;        True&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;gt;&amp;gt;&amp;gt; mocked_response(status_code=404).read() == &amp;#39;mocked body&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        True&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;doctestを実行すると、期待通りにテストができている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python -m doctest -v tests/test_target_class.py
Trying:
    mocked_response&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.code &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;404&lt;/span&gt;
Expecting:
    True
ok
Trying:
    mocked_response&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.read&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mocked body&amp;#39;&lt;/span&gt;
Expecting:
    True
ok
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;今回はわざわざ &lt;code&gt;python -m doctest&lt;/code&gt; で実行したが、&lt;code&gt;nosetests&lt;/code&gt; や &lt;code&gt;py.test&lt;/code&gt; のようなテストランナーを使えば、宣言されているdoctestも簡単に見付けてテストしてくれる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# noseでdoctest&lt;/span&gt;
$ nosetests --with-doctest -v

&lt;span class="c1"&gt;# pytestでdoctest&lt;/span&gt;
$ py.test --doctest-modules -v
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Wed, 18 Nov 2015 21:19:59 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-11-18:/2015/11/18/doctest-with-return-object.html</guid><category>Python</category></item><item><title>Ruby/Pythonで依存パッケージをローカルインストールして開発環境構築やCIビルドを高速化する</title><link>http://raimon49.github.io/2015/11/08/ci-with-local-packages.html</link><description>&lt;p&gt;一般的にRuby/Pythonで書かれたアプリケーションの依存パッケージはBundler/pipでインストールされるが、&lt;a href="https://rubygems.org/"&gt;rubygems.org&lt;/a&gt;や&lt;a href="https://pypi.python.org/pypi"&gt;Python Package Index&lt;/a&gt;からの取得・展開に時間がかかり、またこれらの中央サーバがまれにダウンしていると何もできなくなってしまうケースがある。&lt;/p&gt;
&lt;p&gt;回避策の一つとして、依存パッケージをGitリポジトリに飲んでしまい、パッケージリポジトリとは通信せずローカルインストールで済ませる、いわゆるvendoring（ベンダリング）と呼ばれる方法がある。&lt;/p&gt;
&lt;h2&gt;サンプルリポジトリ&lt;/h2&gt;
&lt;p&gt;それぞれのサンプルとなるGitリポジトリをGitHubに作成した。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/raimon49/ruby-local-gems-sample"&gt;ruby-local-gems-sample&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/raimon49/python-local-wheels-sample"&gt;python-local-wheels-sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ruby + Bundlerの場合&lt;/h2&gt;
&lt;p&gt;Ruby + Bundlerの場合 &lt;code&gt;Gemfile&lt;/code&gt; に依存パッケージを宣言し、&lt;code&gt;bundle package&lt;/code&gt; コマンドでローカルに保存できる。&lt;/p&gt;
&lt;p&gt;インストールの場所は慣例的に &lt;code&gt;vendor&lt;/code&gt; 以下が使われる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 依存パッケージの宣言&lt;/span&gt;
$ cat Gemfile
&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://rubygems.org&amp;quot;&lt;/span&gt;

gem &lt;span class="s2"&gt;&amp;quot;minitest&amp;quot;&lt;/span&gt;
gem &lt;span class="s2"&gt;&amp;quot;minitest-reporters&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# 依存パッケージのインストール&lt;/span&gt;
$ bundle install --path vendor/bundle

&lt;span class="c1"&gt;# 依存パッケージをローカルに保存&lt;/span&gt;
$ bundle package --all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存された &lt;code&gt;*.gem&lt;/code&gt; ファイルは&lt;a href="https://github.com/raimon49/ruby-local-gems-sample/tree/master/vendor/cache"&gt;vendor/cache&lt;/a&gt;以下に管理される。&lt;/p&gt;
&lt;p&gt;GitHubのCreate New repository画面でRuby用の &lt;code&gt;.gitignore&lt;/code&gt; ファイルを自動生成している時は、このキャッシュファイルがバージョン管理下に置かれるよう設定を1行追加すると良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git a/.gitignore b/.gitignore&lt;/span&gt;
&lt;span class="gh"&gt;index 28f4849..9c7d638 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/.gitignore&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/.gitignore&lt;/span&gt;
&lt;span class="gu"&gt;@@ -23,6 +23,7 @@ build/&lt;/span&gt;
 ## Environment normalisation:
 /.bundle/
 /vendor/bundle
&lt;span class="gi"&gt;+!/vendor/cache/*.gem&lt;/span&gt;
 /lib/bundler/man/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上記の設定を追加することで、ローカル &lt;code&gt;*.gem&lt;/code&gt; ファイルをバージョン管理の対象として追加できるようになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add vendor/cache
$ git commit -m  &lt;span class="s1"&gt;&amp;#39;Packaging Gems&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;依存パッケージが全てGitリポジトリに含まれるようになったため、開発メンバーの環境やCI環境ではこのファイルを使って &lt;code&gt;--local&lt;/code&gt; オプションを指定することでローカルインストールが可能になった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git://github.com/raimon49/ruby-local-gems-sample.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ruby-local-gems-sample
$ bundle install --path vendor/bundle --local
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例としてTravis CIでローカルインストールを使う設定を載せておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;bundle install --path vendor/bundle --local&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ローカルインストールを使って&lt;a href="https://travis-ci.org/raimon49/ruby-local-gems-sample"&gt;CIビルドを走らせる&lt;/a&gt;と、&lt;code&gt;bundle install&lt;/code&gt; は1秒かからず完了していることが分かる。&lt;/p&gt;
&lt;h2&gt;Python + pipの場合&lt;/h2&gt;
&lt;p&gt;Pythonの場合はpipと&lt;a href="https://pypi.python.org/pypi/wheel"&gt;wheel&lt;/a&gt;パッケージの組み合わせによって &lt;code&gt;pip wheel&lt;/code&gt; コマンドが使えるようになり、ローカルに保存できる。&lt;/p&gt;
&lt;p&gt;インストールの場所は慣例的に &lt;code&gt;wheelhouse&lt;/code&gt; 以下が使われる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 依存パッケージをインストール&lt;/span&gt;
$ pip install &lt;span class="o"&gt;[&lt;/span&gt;Package A&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;Package B&lt;span class="o"&gt;]&lt;/span&gt;...

&lt;span class="c1"&gt;# 依存パッケージの書き出し&lt;/span&gt;
$ pip freeze &amp;gt; requirements.txt

&lt;span class="c1"&gt;# 依存パッケージをローカルに保存&lt;/span&gt;
$ pip install wheel
$ pip wheel -r requirements.txt
$ git add wheelhouse
$ git commit -m &lt;span class="s1"&gt;&amp;#39;Packaging wheels&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;依存パッケージが全てGitリポジトリに含まれるようになったため、開発メンバーの環境やCI環境ではこのファイルを使って &lt;code&gt;--no-index -f wheelhouse&lt;/code&gt; オプションを指定することでローカルインストールが可能になった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git://github.com/raimon49/python-local-wheels-sample.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; python-local-wheels-sample
$ pip install -r requirements.txt --no-index -f wheelhouse
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例としてTravis CIでローカルインストールを使う設定を載せておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt --no-index -f wheelhouse&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ローカルインストールを使って&lt;a href="https://travis-ci.org/raimon49/python-local-wheels-sample"&gt;CIビルドを走らせる&lt;/a&gt;と、&lt;code&gt;pip install&lt;/code&gt; は1秒かからず完了していることが分かる。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;RubyやPythonで書かれたアプリケーションの依存パッケージをvendoringで管理する方法で、開発環境構築やCIビルドを高速に行うことができる。&lt;/p&gt;
&lt;p&gt;高速化の他にも、開発サーバやプロダクションサーバからのHTTP/HTTPS通信先が絞られているケースや、ビルド・デプロイを公式パッケージリポジトリのダウン影響を受けず安定化させる効果も期待できる。&lt;/p&gt;
&lt;p&gt;一方で、依存パッケージを丸ごとGitリポジトリに飲むのは、リポジトリサイズの肥大化という面で、ある意味で富豪的なアプローチと言える。チーム・組織のサイズによって、例えばパッケージリポジトリのミラーを立ち上げるといった別の方法が適している事も十分に考えられる。&lt;/p&gt;
&lt;p&gt;この記事では例としてTravis CIでのビルドにローカルインストールを利用しているが、Travis CIを使っていてCIビルドの時間を短縮化したいだけなら&lt;a href="http://docs.travis-ci.com/user/caching/"&gt;Caching Dependencies and Directories機能&lt;/a&gt;を使っておくのも良い（CircleCIにもYAMLでの書式は違うが同様の機能がある）。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sun, 08 Nov 2015 15:45:17 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-11-08:/2015/11/08/ci-with-local-packages.html</guid><category>CI</category><category>Git</category><category>GitHub</category><category>Ruby</category><category>Python</category></item><item><title>『Pythonプロフェッショナルプログラミング 第2版』のWebアプリケーション課題をGitHubで作りTest PyPIで公開する</title><link>http://raimon49.github.io/2015/10/31/pypro2-guestbook-webapp-with-github.html</link><description>&lt;p&gt;&lt;a href="http://www.shuwasystem.co.jp/products/7980html/4315.html"&gt;秀和システムより出版されている『Pythonプロフェッショナルプログラミング 第2版』&lt;/a&gt;を読んでPythonパッケージングの仕組みなどについて勉強している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2章「Webアプリケーションを作る」&lt;/li&gt;
&lt;li&gt;3章「Pythonプロジェクトの構成とパッケージ作成」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で課題として登場するFlaskを使ったWebアプリケーションをPythonパッケージとして作成する方法について、書籍のサポートページなどからサンプルページを探してみたものの、見付からなかったので1から作ってみることにした。何点か書籍の内容に対してアレンジを加えたので、併せて紹介したい。&lt;/p&gt;
&lt;h2&gt;成果物&lt;/h2&gt;
&lt;p&gt;コード全体はGitHub、PythonパッケージはTest PyPI Serverというパッケージリポジトリで公開している。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/raimon49/pypro2-guestbook-webapp"&gt;https://github.com/raimon49/pypro2-guestbook-webapp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://testpypi.python.org/pypi/raimon49.guestbook"&gt;https://testpypi.python.org/pypi/raimon49.guestbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Test PyPIというのは名前の通りPyPI公開前の検査・学習用のサーバで、機能に関しては本番用PyPIと全く同じものが利用できる。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.python.org/moin/TestPyPI"&gt;Test PyPI Server解説ページ&lt;/a&gt;に書かれている通り、pipのオプション &lt;code&gt;-i&lt;/code&gt; でパッケージインデックスとして &lt;code&gt;https://testpypi.python.org/pypi&lt;/code&gt; を指定することで、Test PyPI上で公開したパッケージからインストールが可能になる。この時、課題guestbookアプリの依存しているFlaskはTest PyPIサーバからは見付けられないため、先にFlaskをインストールしておく必要がある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 先にFlaskをPyPIサーバからインストール&lt;/span&gt;
$ pip install Flask

&lt;span class="c1"&gt;# guestbookアプリをTest PyPIサーバからインストール&lt;/span&gt;
$ pip install -i https://testpypi.python.org/pypi raimon49.guestbook
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;書籍との違い&lt;/h2&gt;
&lt;p&gt;次のような点を書籍の内容とは違った方法に変更した。いずれも2015年現在で主流に近い部分と考えられるが、最後のTest PyPIについては書籍中でもオプションの選択肢として提示されており、特別にアレンジした内容ではない。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python本体とvirtualenv環境の管理にpyenvを使う&lt;/li&gt;
&lt;li&gt;Mercurial + BitbucketではなくGit + GitHubで構成管理・ホスティング&lt;/li&gt;
&lt;li&gt;コマンドラインオプションでネットワークとポート番号を指定可能に&lt;/li&gt;
&lt;li&gt;Travis CIを利用してPEP8に準拠しているかテスト&lt;/li&gt;
&lt;li&gt;開発ツールの依存管理にpip-toolsを利用&lt;/li&gt;
&lt;li&gt;Test PyPI Serverでパッケージを公開&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Python本体とvirtualenv環境の管理にpyenvを使う&lt;/h2&gt;
&lt;p&gt;書籍ではUbuntuサーバの中で最新の2.7系Pythonをビルドする方法が紹介されている。この辺りはマルチバージョンにPythonを切り替えら得られる&lt;a href="https://github.com/yyuu/pyenv"&gt;pyenv&lt;/a&gt;を使った方が管理が楽であると考え、pyenv経由でPython本体をビルド・利用するようにした。&lt;/p&gt;
&lt;p&gt;また、virtualenv環境もpyenvコマンドを通して透過的に管理・利用できるため、READMEの内容もpyenvを中心とした手順に変えている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/raimon49/pypro2-guestbook-webapp/blob/master/README.rst"&gt;https://github.com/raimon49/pypro2-guestbook-webapp/blob/master/README.rst&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Mercurial + BitbucketではなくGit + GitHubで構成管理・ホスティング&lt;/h2&gt;
&lt;p&gt;構成管理にMercurialはやや特殊だと感じたため、Gitを採用するよう変更した。&lt;/p&gt;
&lt;p&gt;リポジトリのホスティングサービスは書籍の通りにBitbucketを使うことも考えられる（BitbucketではGitリポジトリのホスティングもサポートしている）が、ホスティング先もGitHubを使うことに変更した。&lt;/p&gt;
&lt;p&gt;書籍との主な違いは構成管理上の無視設定を記述するファイルが &lt;code&gt;.hgignore&lt;/code&gt; から &lt;code&gt;.gitignore&lt;/code&gt; に変わる程度で、大きな違いは無い。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/raimon49/pypro2-guestbook-webapp/blob/master/.gitignore"&gt;https://github.com/raimon49/pypro2-guestbook-webapp/blob/master/.gitignore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他にもGitHubを使うメリットとして、&lt;a href="http://www.addalicense.com/"&gt;Add A License&lt;/a&gt;といった便利な連係サービスから&lt;a href="https://github.com/raimon49/pypro2-guestbook-webapp/commit/101ee9fbaccd262b551f5ef2a9aedcd6e43eaa1f"&gt;ライセンスファイルの自動生成&lt;/a&gt;ができる。&lt;/p&gt;
&lt;h2&gt;コマンドラインオプションでネットワークとポート番号を指定可能に&lt;/h2&gt;
&lt;p&gt;書籍で紹介されているVirtualBoxと自宅PCでのVirtualBox環境との間で、ネットワーク設定がやや異なっていたので、いっそコマンドラインオプションで指定可能にしようと考えた。&lt;/p&gt;
&lt;p&gt;Python 2.7には標準ライブラリとして強力な&lt;a href="http://docs.python.jp/2/library/argparse.html"&gt;argparseモジュール&lt;/a&gt;が付属しているので、これを使ってやれば簡単に実現できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Markup&lt;/span&gt;

&lt;span class="n"&gt;NETWORK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;

&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A guestbook web application.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;guestbook 1.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--network&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NETWORK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上記の実装によりコマンドラインオプションが指定されていたらそちらを使うようになったため、最終成果物の &lt;code&gt;guestbook&lt;/code&gt; コマンドでは、自由にネットワークとポート番号を変更してFlaskアプリケーションを起動できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ネットワークとポート番号を変更して起動&lt;/span&gt;
$ guestbook -n &lt;span class="m"&gt;192&lt;/span&gt;.168.56.100 -p &lt;span class="m"&gt;5000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Travis CIを利用してPEP8に準拠しているかテスト&lt;/h2&gt;
&lt;p&gt;書籍では主なCIツールとしてJenkinsの使い方が紹介されている。GitHubではCI as a ServiceとしてTravis CIと組み合わせる方法がメジャーであるため、こちらを利用してPEP8に準拠したPythonコードが書けているかチェックするようにした。&lt;/p&gt;
&lt;p&gt;チェックツールには&lt;a href="https://pypi.python.org/pypi/pytest-pep8"&gt;pytest-pep8&lt;/a&gt;を使い、非準拠コードの修正には&lt;a href="https://pypi.python.org/pypi/autopep8/"&gt;autopep8&lt;/a&gt;を使った。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ツールのインストール&lt;/span&gt;
$ pip install pytest-pep8 autopep8

&lt;span class="c1"&gt;# コードのチェック&lt;/span&gt;
$ py.test -v --pep8 guestbook

&lt;span class="c1"&gt;# 非準拠コードの修正&lt;/span&gt;
$ autopep8 -i guestbook/__init__.py
$ git commit -am &lt;span class="s1"&gt;&amp;#39;Fix PEP8: E302 expected 2 blank lines&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これらのチェック用ツールへの依存関係は後述のpip-toolsで &lt;code&gt;dev-requirements.txt&lt;/code&gt; というファイルにまとめ、Travis CIの設定ファイルでインストールされるように指定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r dev-requirements.txt&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;py.test -v --pep8 guestbook&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Travis CI側のWeb UIで今回のGitリポジトリと連携させるよう選択すると&lt;a href="https://travis-ci.org/raimon49/pypro2-guestbook-webapp"&gt;pushの度に自動でチェックが走る&lt;/a&gt;ようになる。&lt;/p&gt;
&lt;h2&gt;開発ツールの依存管理にpip-toolsを利用&lt;/h2&gt;
&lt;p&gt;書籍でもpipを使う際の注意点として挙げられているが、guestbookアプリケーションの開発に利用するFlaskのバージョンが上がって &lt;code&gt;pip install -U Flask&lt;/code&gt; でアップグレードし、もしFlaskの依存する他のPythonパッケージが変わった場合、不要になったパッケージの削除には追随できない。&lt;/p&gt;
&lt;p&gt;この辺りを楽に管理するために&lt;a href="https://github.com/nvie/pip-tools"&gt;pip-tools&lt;/a&gt;を使う。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pip-tools
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;まずguestbookアプリケーション本体の動作に必要となる依存パッケージを &lt;code&gt;requirements.in&lt;/code&gt; ファイルに記述する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Flask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次にguestbookアプリケーションの開発作業でのみ必要となる依存パッケージを &lt;code&gt;dev-requirements.in&lt;/code&gt; ファイルに記述する。このファイルでは &lt;code&gt;requirements.in&lt;/code&gt; の内容も取り込むようにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-r requirements.in

autopep8
docutils
wheel
pip-tools
pytest-pep8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;それぞれのファイルをpip-toolsに付属する &lt;code&gt;pip-compile&lt;/code&gt; でコンパイルすると、最新の依存バージョンが書き出される。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# requirements.txtファイルの書き出し&lt;/span&gt;
$ pip-compile requirements.in

&lt;span class="c1"&gt;# dev-requirements.txtファイルの書き出し&lt;/span&gt;
$ pip-compile dev-requirements.in

&lt;span class="c1"&gt;# 依存バージョンに更新があった場合の手元virtualenv環境への反映&lt;/span&gt;
$ pip-sync dev-requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Test PyPI Serverでパッケージを公開&lt;/h2&gt;
&lt;p&gt;Test PyPIへのパッケージ登録・公開方法は&lt;a href="http://peterdowns.com/posts/first-time-with-pypi.html"&gt;How to submit a package to PyPI&lt;/a&gt;のページに詳しい。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pypi.python.org/pypi?%3Aaction=register_form"&gt;本系PyPIアカウント登録&lt;/a&gt;と&lt;a href="http://testpypi.python.org/pypi?%3Aaction=register_form"&gt;Test PyPIアカウント登録&lt;/a&gt;を済ませる&lt;ul&gt;
&lt;li&gt;両者は機能としては同じだがアカウントDBが完全に別物であるため、両方に登録する&lt;/li&gt;
&lt;li&gt;入力したEメールアドレスにリンク付きのメールが届いて、それを踏んで規約同意すると登録完了&lt;/li&gt;
&lt;li&gt;同じEメールアドレスとパスワードを使っておくのがオススメだそう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ホームディレクトリに &lt;code&gt;.pypirc&lt;/code&gt; ファイルを作成し &lt;code&gt;pypi&lt;/code&gt; と &lt;code&gt;pypitest&lt;/code&gt; の設定を記述する&lt;ul&gt;
&lt;li&gt;&lt;code&gt;password:&lt;/code&gt; は空欄でも登録時にプロンプトで入力できるため問題は無い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Test PyPIにパッケージを登録・公開する&lt;ul&gt;
&lt;li&gt;パッケージ名が &lt;code&gt;guestbook&lt;/code&gt; だと他と被る可能性が高いため &lt;code&gt;{アカウント名}.guestbook&lt;/code&gt; のような名前を使うと良い&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;.pypirc&lt;/code&gt; では &lt;code&gt;pypitest&lt;/code&gt; という名前でTest PyPI Serverが登録しておく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[distutils]&lt;/span&gt;
&lt;span class="na"&gt;index-servers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    pypi&lt;/span&gt;
&lt;span class="s"&gt;    pypitest&lt;/span&gt;

&lt;span class="k"&gt;[pypitest]&lt;/span&gt;
&lt;span class="na"&gt;repository&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://testpypi.python.org/pypi&lt;/span&gt;
&lt;span class="na"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;raimon49&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

&lt;span class="k"&gt;[pypi]&lt;/span&gt;
&lt;span class="na"&gt;repository&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://pypi.python.org/pypi&lt;/span&gt;
&lt;span class="na"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;raimon49&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この状態だと &lt;code&gt;-r pypi&lt;/code&gt; オプションで、登録と公開する先をTest PyPIに指定できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# registerの時にパスワードを尋ねられてuploadでもそれが認証に使われる&lt;/span&gt;
$ python setup.py register -r pypitest sdist bdist_wheel upload -r pypitest
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;Pythonパッケージの作成方法について、『Pythonプロフェッショナルプログラミング 第2版』の内容を少しアレンジしてまとめた。本書はビープラウド社のノウハウが中心であるため、構成管理にMercurialを採用しているのかなと感じた。自分もMercurialは一時期プライベートで使っていたが、世間の流れが完全にGitへ傾いてしまったため、今回学んだ内容もGitで管理したかった。&lt;/p&gt;
&lt;p&gt;まとまった量のREADMEドキュメントをreStructuredTextフォーマットで書いたのは今回が初めてで、Markdownとの違いも見えて良い経験になった。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sat, 31 Oct 2015 08:52:35 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-10-31:/2015/10/31/pypro2-guestbook-webapp-with-github.html</guid><category>CI</category><category>Git</category><category>GitHub</category><category>Python</category></item><item><title>Travis CIのビルドコンテナ内で最新のpipを使う</title><link>http://raimon49.github.io/2015/10/11/use-latest-pip-in-travis.html</link><description>&lt;p&gt;&lt;a href="https://github.com/nvie/pip-tools"&gt;pip-tools&lt;/a&gt;が大きくバージョンアップし、 &lt;code&gt;pip-compile&lt;/code&gt; および &lt;code&gt;pip-sync&lt;/code&gt; コマンドを組み合わせた依存管理が行えるようになった。&lt;/p&gt;
&lt;h2&gt;CIフローとして依存パッケージの更新を知りたい&lt;/h2&gt;
&lt;p&gt;pip-toolsの細かな使い方は、最後に参考情報をまとめることにして、pip-toolsを利用すると、現在リポジトリ内で宣言している依存パッケージが古くなっているかどうか、次のように調べられる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip-compile --dry-run requirements.in &lt;span class="p"&gt;|&lt;/span&gt; diff -u requirements.txt -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pip-toolsでの管理に移行しておらずトラディショナルな &lt;code&gt;pip freeze -l&lt;/code&gt; した内容で依存パッケージを宣言している場合は、次のように比較が可能である。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip-compile --dry-run --no-header --no-annotate requirements.in &lt;span class="p"&gt;|&lt;/span&gt; diff -u requirements.txt -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;いずれの比較方法にせよ&lt;a href="http://travis-ci.org/"&gt;Travis CI&lt;/a&gt;のようなCI as a Serviceでのビルドログに上記コマンドの結果を記録しておくと、古くなったパッケージが検知できて便利である。&lt;/p&gt;
&lt;h2&gt;Travis CIのpipが古い&lt;/h2&gt;
&lt;p&gt;ところが2015-10-11現在、Travis CIのPythonプラットフォームでビルドを実行するコンテナ内では &lt;code&gt;pip-compile&lt;/code&gt; に必要な要件 &lt;code&gt;pip==6.1 or higher&lt;/code&gt; を満たしておらず、pipのバージョンが古いためにビルドが必ず失敗してしまう。&lt;/p&gt;
&lt;p&gt;これを解決するには、&lt;code&gt;before_script&lt;/code&gt; のフックでpipを最新にアップグレードしてしまえば良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;install&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -r requirements.txt&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;before_script&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install -U pip&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip-compile --dry-run requirements.in | diff -u requirements.txt -&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;(テストスクリプトの実行)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;やや強引な方法だが、Travis CI側のpipデフォルトバージョンが上がるまでのワークアラウンドなので、不要になったら消せば問題ないと思われる。&lt;/p&gt;
&lt;h2&gt;参考情報&lt;/h2&gt;
&lt;p&gt;pip-toolsに関しては、次のページを参考にした。この管理方法が主流になって行くか現時点では分からないが、CIと組み合わせ易い点は便利である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/ryu22e/items/ad3f8f3df30886d23661"&gt;Python - pip-toolsでrequirements.txtのパッケージバージョン番号を管理しよう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://koed00.github.io/managed-environments-with-piptools/"&gt;Managed environments with pip-tools ? koed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sun, 11 Oct 2015 20:31:05 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-10-11:/2015/10/11/use-latest-pip-in-travis.html</guid><category>CI</category><category>Python</category></item><item><title>Pythonのfunctoolsでターミナルに色付きテキスト出力する関数をお手軽作成する</title><link>http://raimon49.github.io/2015/08/07/python-puts-color-sequence-with-functools.html</link><description>&lt;h2&gt;ターミナルの色付きテキスト出力&lt;/h2&gt;
&lt;p&gt;ターミナルの画面上に色付きテキストを出力するには、&lt;a href="http://linuxjf.osdn.jp/JFdocs/Bash-Prompt-HOWTO-5.html"&gt;ANSI エスケープシーケンス: 色とカーソル操作&lt;/a&gt;で解説されている通り、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;表示されないエスケープシーケンスは、&lt;code&gt;\[\033[&lt;/code&gt; と &lt;code&gt;\]&lt;/code&gt; で囲んでやる必要があります。色のエスケープシーケンスの場合は 後ろに &lt;code&gt;m\]&lt;/code&gt; をつけてやる必要があります。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;と、エスケープシーケンス + 目的のカラーコードでテキストを囲んでやると実現できる。&lt;/p&gt;
&lt;p&gt;これをPythonで素朴にやろうとすると &lt;code&gt;print&lt;/code&gt; 関数を使うことになるだろう。&lt;/p&gt;
&lt;h2&gt;Fabricでの色付きテキスト出力関数の実装&lt;/h2&gt;
&lt;p&gt;Pythonで作られたデプロイ・構成管理に広く使われるツール&lt;a href="http://www.fabfile.org/"&gt;Fabric&lt;/a&gt;には、&lt;a href="http://docs.fabfile.org/en/1.10/api/core/colors.html"&gt;Color output functions&lt;/a&gt;が付属しており、より抽象的に色付きのテキスト出力が可能である。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.colors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This text is green!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fabric 1.10.0の実装では、次のように高階関数を使ってそれぞれのカラー出力関数が作成されている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrap_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s2"&gt;[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;m&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s2"&gt;[0m&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;

&lt;span class="n"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_wrap_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;31&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_wrap_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;32&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;yellow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_wrap_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;33&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_wrap_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;34&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;magenta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_wrap_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;35&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cyan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_wrap_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;36&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;white&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_wrap_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;37&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;_wrap_with(code)&lt;/code&gt; に渡されたカラーコードを束縛する &lt;code&gt;inner&lt;/code&gt; 関数を作って返しており、高階関数のお手本みたいな内容である。&lt;/p&gt;
&lt;h2&gt;functools.partialを使って自前実装する&lt;/h2&gt;
&lt;p&gt;Fabricを使ったタスクの途中で色付きテキストを出力したい時は前述の関数を使えば良いとして、Pythonコアのみで何かしらのCLIツールを作る時は、どうするのが良いだろうか。&lt;/p&gt;
&lt;p&gt;標準ライブラリの&lt;a href="http://docs.python.jp/2/library/functools.html"&gt;functools&lt;/a&gt;を使うと、非常に短くお手軽なコードで実現できる。&lt;/p&gt;
&lt;p&gt;具体的には、次のようなコードになる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_colored&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_bold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_bold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;m&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0m&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="n"&gt;print_green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;print_colored&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;32&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print_blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;print_colored&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;34&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print_cyan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;print_colored&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;36&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使ってみても、うまくカラーコードが束縛化された関数オブジェクトを作れている事が分かる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;print_green&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This text is green!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print_blue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This text is blue!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print_cyan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;This text is bold cyan!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_bold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;凝った事をやりたければ&lt;a href="https://github.com/lskbr/colorconsole"&gt;colorconsole&lt;/a&gt;のようなPythonライブラリを使うのも良いが、3rd partyライブラリに依存せずに色付きテキストを出力したければ、上記くらいのコードで十分だろう。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Fri, 07 Aug 2015 19:47:05 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-08-07:/2015/08/07/python-puts-color-sequence-with-functools.html</guid><category>Fabric</category><category>Python</category></item><item><title>SwiftでCocoa Delegation Patternに合わせたカスタムビューのProtocolを設計する</title><link>http://raimon49.github.io/2015/07/12/swift-cocoa-delegation-pattern.html</link><description>&lt;h2&gt;Delegateを通したカスタムビューとのやり取り&lt;/h2&gt;
&lt;p&gt;Objective-C/Swiftでは各オブジェクトの応答できるメソッドの約束事（他のプログラミング言語ではInterfaceと呼ばれるもの）としてProtocolを宣言する。&lt;/p&gt;
&lt;p&gt;Protocolの中でもUIKitに含まれるようなビュークラスでは、Cocoa Delegation Patternと形容されるやり方が存在しており、自前でカスタムビューを作る時も、このパターンに合わせておくとユーザーコードも分かり易いものになる。&lt;/p&gt;
&lt;p&gt;Swiftでこのやり方をする場合のコードを整理しておく。&lt;/p&gt;
&lt;h2&gt;Objective-Cの場合&lt;/h2&gt;
&lt;p&gt;Objective-Cの場合は、定義したカスタムビューのヘッダファイル前方にDelegationの仕様を明示する事が一般的だと思う。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@class&lt;/code&gt; でカスタムビューの型を宣言する事で、コンパイルエラーとならずにカスタムビュー定義の前方にProtocolを書ける。&lt;/p&gt;
&lt;p&gt;メソッドシグネチャの第1引数でカスタムビュー自身のオブジェクトを渡すように設計しておくと、画面内で複数配置しているようなケースで、どのビューから応答が来たか判別できる。UIKitのクラスでは大抵こうなっている。&lt;/p&gt;
&lt;p&gt;カスタムビュー側では &lt;code&gt;weak&lt;/code&gt; 参照した状態で &lt;code&gt;MCVMyCustomViewDelegate&lt;/code&gt; に適合するオブジェクトを保持する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;@class&lt;/span&gt; &lt;span class="nc"&gt;MCVMyCustomView&lt;/span&gt;;

&lt;span class="k"&gt;@protocol&lt;/span&gt; &lt;span class="nc"&gt;MCVMyCustomViewDelegate&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;NSObject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;@optional&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nl"&gt;myCustomViewDidLoad&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;MCVMyCustomView&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;myCustomView&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;myCustomView:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MCVMyCustomView&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;myCustomView&lt;/span&gt; &lt;span class="nf"&gt;didSelectAtViewNumber:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSUInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;viewNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;

&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;MCVMyCustomView&lt;/span&gt; : &lt;span class="bp"&gt;UIView&lt;/span&gt;

&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;weak&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MCVMyCustomViewDelegate&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;MCVMyCustomView.m&lt;/code&gt; から応答する時は &lt;code&gt;respondsToSelector&lt;/code&gt; で実装されているか確認した上でメッセージを送信する（クラッシュ対策）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="nl"&gt;respondsToSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;myCustomViewDidLoad&lt;/span&gt;&lt;span class="p"&gt;:)])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="nl"&gt;myCustomViewDidLoad&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="nl"&gt;respondsToSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;@selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;myCustomView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;didSelectAtViewNumber&lt;/span&gt;&lt;span class="p"&gt;:)])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="nl"&gt;myCustomView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;
          &lt;span class="nl"&gt;didSelectAtViewNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Swiftの場合&lt;/h2&gt;
&lt;p&gt;Swiftの場合もObjective-C同様のところに気を遣って設計すると、以下のようなコードになる。&lt;/p&gt;
&lt;p&gt;Protocolで宣言したメソッドへの適合（実装）を任意としたい時は &lt;code&gt;@objc&lt;/code&gt; 属性か &lt;code&gt;NSObject&lt;/code&gt; の継承が必要になる。&lt;/p&gt;
&lt;p&gt;カスタムビューでは、このProtocolをOptionalなweak参照のオブジェクトとして保持するのが妥当だと考えられる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;UIKit&lt;/span&gt;

&lt;span class="kr"&gt;@objc&lt;/span&gt; &lt;span class="kd"&gt;protocol&lt;/span&gt; &lt;span class="nc"&gt;MyCustomViewDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;NSObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;optional&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;myCustomViewDidLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myCustomView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyCustomView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;optional&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;myCustomView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myCustomView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyCustomView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;didSelectAtViewNumber&lt;/span&gt; &lt;span class="n"&gt;viewNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;UInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyCustomView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;UIView&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;weak&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyCustomViewDelegate&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;応答コードはSwiftでは非常に短く書ける。&lt;/p&gt;
&lt;p&gt;ただし、型としてのOptionalや実装任意のメソッド呼び出しを安全に取り出すため各所に &lt;code&gt;?&lt;/code&gt; が登場し、やや読みにくい印象を受ける。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;myCustomViewDidLoad&lt;/span&gt;&lt;span class="p"&gt;?(&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;myCustomView&lt;/span&gt;&lt;span class="p"&gt;?(&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;didSelectAtViewNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/AdoptingCocoaDesignPatterns.html"&gt;Using Swift with Cocoa and Objective-C: Adopting Cocoa Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html"&gt;The Swift Programming Language: Protocols&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sun, 12 Jul 2015 12:43:22 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-07-12:/2015/07/12/swift-cocoa-delegation-pattern.html</guid><category>Objective-C</category><category>Swift</category><category>iOS</category></item><item><title>VolleyライブラリNetworkImageViewのタイムアウト時間を長くする</title><link>http://raimon49.github.io/2015/07/05/override-volley-imageloader.html</link><description>&lt;p&gt;Android Open Source Projectでメンテナンスされている&lt;a href="https://android.googlesource.com/platform/frameworks/volley"&gt;定番ネットワークライブラリVolley&lt;/a&gt;には、&lt;code&gt;NetworkImageView&lt;/code&gt; という、ネットワーク上の画像リソースを取得・表示してくれる &lt;code&gt;ImageView&lt;/code&gt; の拡張が含まれている。&lt;/p&gt;
&lt;p&gt;非常にお手軽で便利だが、デフォルトのタイムアウト時間が2500ミリ秒に設定されており、例えば本番環境よりも貧弱な開発環境でちょっとした画像を作って返すサーバと通信するようなケースでは、タイムアウトしてしまう事がある。&lt;/p&gt;
&lt;p&gt;このようなケースでは &lt;code&gt;ImageLoader&lt;/code&gt; を自前で定義したクラスと差し替える事で &lt;code&gt;NetworkImageView&lt;/code&gt; に取得・表示する画像リソースへのリクエストタイムアウト時間を変更できる。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Volley 1.0.16&lt;ul&gt;
&lt;li&gt;Gradleで入れたいため&lt;a href="https://github.com/mcxiaoke/android-volley"&gt;mcxiaokeリポジトリにForkされている&lt;/a&gt; &lt;code&gt;1.0.16 2015.05.18&lt;/code&gt; を使っている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;クラスの定義&lt;/h2&gt;
&lt;p&gt;ここでは &lt;code&gt;Activity&lt;/code&gt; や &lt;code&gt;Fragment&lt;/code&gt; の中にネストで定義している前提として書いているが、必要に応じて独立したクラスとして切り出すなどする。タイムアウト時間は10秒とした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomImageLoader&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ImageLoader&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;CUSTOM_TIMEOUT_MS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;CustomImageLoader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RequestQueue&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImageCache&lt;/span&gt; &lt;span class="n"&gt;imageCache&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageCache&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Bitmap&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;makeImageRequest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;requestUrl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxWidth&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxHeight&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                                                &lt;span class="n"&gt;ImageView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ScaleType&lt;/span&gt; &lt;span class="n"&gt;scaleType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;cacheKey&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Bitmap&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeImageRequest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestUrl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxWidth&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxHeight&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaleType&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cacheKey&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setRetryPolicy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DefaultRetryPolicy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;CUSTOM_TIMEOUT_MS&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;DefaultRetryPolicy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DEFAULT_MAX_RETRIES&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;DefaultRetryPolicy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DEFAULT_BACKOFF_MULT&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;クラスの利用&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;NetworkImageView&lt;/code&gt; を使う箇所で、上の &lt;code&gt;CustomImageLoader&lt;/code&gt; と差し替えて使うと、任意のタイムアウト時間設定でアクセスできる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// ImageLoaderの生成&lt;/span&gt;
&lt;span class="n"&gt;requestQueue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Volley&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newRequestQueue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getApplicationContext&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;imageLoader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CustomImageLoader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestQueue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageCache&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ImageLoaderの利用&lt;/span&gt;
&lt;span class="n"&gt;networkImageView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setImageUrl&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageLoader&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sun, 05 Jul 2015 15:08:04 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-07-05:/2015/07/05/override-volley-imageloader.html</guid><category>Android</category><category>Android Studio</category><category>Java</category></item><item><title>SwiftでHTTPS通信時に自己認証証明書の警告によるエラーを無視させる</title><link>http://raimon49.github.io/2015/05/27/ignore-verify-self-signed-certificate.html</link><description>&lt;h2&gt;NSURLConnectionにおけるkCFStreamErrorDomainSSLの発生&lt;/h2&gt;
&lt;p&gt;アプリ開発用途で自己認証証明書を使ったインターナルなAPIサーバを用意してHTTPS通信をする時、次のようなエラーが発生する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NSURLConnection/CFURLConnection HTTP load failed &lt;span class="o"&gt;(&lt;/span&gt;kCFStreamErrorDomainSSL, -9813&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;このような場合、&lt;code&gt;NSURLRequest&lt;/code&gt; クラスの非公開APIである &lt;code&gt;allowsAnyHTTPSCertificateForHost:&lt;/code&gt; メソッドをオーバーライドすることで証明書の検証プロセスを回避できる。&lt;/p&gt;
&lt;h2&gt;Objective-Cでのオーバーライド&lt;/h2&gt;
&lt;p&gt;Objective-Cの場合は &lt;code&gt;NSURLRequest&lt;/code&gt; のカテゴリを定義し、該当のメソッドをオーバーライドすれば良い。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="bp"&gt;NSURLRequest&lt;/span&gt;&lt;span class="nl"&gt;(IgnoringCertificateError)&lt;/span&gt;

&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;allowsAnyHTTPSCertificateForHost:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;host&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Swiftでのオーバーライド&lt;/h2&gt;
&lt;p&gt;Swiftで同様のことができないか試してみたが、次のようにすると証明書の検証を回避できた。&lt;/p&gt;
&lt;p&gt;ポイントとしては &lt;code&gt;extension&lt;/code&gt; キーワードで既存クラスを拡張し、さらに &lt;code&gt;static&lt;/code&gt; キーワードを付けてメソッドのシグニチャを揃えることでオーバーライドを実現する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="bp"&gt;NSURLRequest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;allowsAnyHTTPSCertificateForHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Releaseビルドには含めてはいけない&lt;/h2&gt;
&lt;p&gt;当然だが、非公開APIの挙動を書き換えているため、App Store提出時のReleaseビルドに含めてしまうと、Appleの審査フローいおいてリジェクトされるリスクがある。&lt;/p&gt;
&lt;p&gt;また、万が一に審査を通ったとしても、アプリのユーザーを危険に晒すことになるため、この書き換えがReleaseビルドには含まれないようDebugビルドなどに限定しておくこと。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Wed, 27 May 2015 23:04:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-05-27:/2015/05/27/ignore-verify-self-signed-certificate.html</guid><category>Objective-C</category><category>Swift</category><category>iOS</category></item><item><title>コミット時にMarkdownファイルの構文が正しいかnpm testでチェックさせる</title><link>http://raimon49.github.io/2015/05/01/lint-markdown-at-commit.html</link><description>&lt;p&gt;&lt;a href="/2015/04/25/create-blog-with-hexo.html"&gt;静的ページジェネレータHexoで作成したブログをGitHub Pagesで公開する&lt;/a&gt;の記事で作成したブログのGitリポジトリに対して、コミット時にMarkdownファイルの構文チェックさせる方法は無いか調べた。&lt;/p&gt;
&lt;h2&gt;依存ツール&lt;/h2&gt;
&lt;p&gt;次のツールを利用することで可能だった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/typicode/husky"&gt;husky&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;コミットやプッシュ時のGit hookを自動で作成してくれる&lt;/li&gt;
&lt;li&gt;インストールすると &lt;code&gt;package.json&lt;/code&gt; でこれらのタイミングに対して実行する &lt;code&gt;run-script&lt;/code&gt; が定義可能になる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DavidAnson/markdownlint"&gt;markdownlint&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DavidAnson/markdownlint/blob/master/doc/Rules.md"&gt;カスタマイズ可能なルールベース&lt;/a&gt;でMarkdownファイルの構文が妥当かチェックできるJavaScript APIが提供される&lt;/li&gt;
&lt;li&gt;RubyGems向けに作られた&lt;a href="https://github.com/mivok/markdownlint"&gt;Markdownlint&lt;/a&gt;のポーティングらしい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/isaacs/node-glob"&gt;glob&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Markdownファイルをまとめて構文チェックに渡す際に使う&lt;/li&gt;
&lt;li&gt;Grunt/Gulpといったタスクランナーを使う場合は、同様の事が可能なため、不要だと思われる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらを &lt;code&gt;--save-dev&lt;/code&gt; オプションを指定してインストールする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install markdownlint husky glob --save-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;テストを書く&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;test/markdown.js&lt;/code&gt; として、Hexoのブログ記事生成元となるMarkdownファイル全体を構文チェックするテストを記述する。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;options.config&lt;/code&gt; には &lt;a href="https://github.com/DavidAnson/markdownlint/blob/master/style/relaxed.json"&gt;relaxed.json&lt;/a&gt;のようなJSONファイルで定義したルールを渡しても良いようだ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var result = markdownlint.sync(options)&lt;/code&gt; で同期的に実行したチェック結果が返るので、その文字列表現としてエラー情報が取得できたか否かを見ている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;markdownlint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;markdownlint&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;glob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;glob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;files&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blog/source/_posts/*.md&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;config&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;MD007&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;indent&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;markdownlint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;resultString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resultString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resultString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Markdown Syntax OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;標準付属している&lt;a href="https://nodejs.org/api/assert.html"&gt;assertモジュール&lt;/a&gt;を使うべきかと考えたが、上手くアサーションで表現する方法が思いつかなかった。よって、原始的なやり方だが終了コードで失敗させることにした。&lt;/p&gt;
&lt;h2&gt;run-scriptとして実行可能にする&lt;/h2&gt;
&lt;p&gt;テストコードが完成したのでリポジトリルートに &lt;code&gt;package.json&lt;/code&gt; を置いて、コミット時に自動実行されるようにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;lint&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;node test/markdown.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;precommit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;npm run lint&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;npm run lint&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;devDependencies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;glob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;^5.0.5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;husky&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;^0.7.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;markdownlint&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.0.4&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;コミット時に失敗するか確認する&lt;/h2&gt;
&lt;p&gt;仕込んだテストがコミット時にきちんと機能するか確認してみる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;blog/source/_posts/hello-my-post.md&lt;/code&gt; ファイルを、わざと構文エラーが出るように編集する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;見出しの順序を小さいレベルから開始させる&lt;/li&gt;
&lt;li&gt;4スペースインデントで設定したルールを2スペースで破らせる&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; Hexo最初のpost
&lt;span class="gd"&gt;-==============&lt;/span&gt;
&lt;span class="gi"&gt;+--------------&lt;/span&gt;

 リストのテスト
&lt;span class="gd"&gt;---------------&lt;/span&gt;
&lt;span class="gi"&gt;+==============&lt;/span&gt;

 - A
&lt;span class="gi"&gt;+  - AAA&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この状態で &lt;code&gt;git commit&lt;/code&gt; を実行すると、コミットログの入力へは進めず、 &lt;code&gt;husky&lt;/code&gt; によって中止できた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git commit -a
blog/source/_posts/hello-my-post.md: &lt;span class="m"&gt;7&lt;/span&gt;: MD002 First header should be a h1 header
blog/source/_posts/hello-my-post.md: &lt;span class="m"&gt;14&lt;/span&gt;: MD007 Unordered list indentation
blog/source/_posts/hello-my-post.md: &lt;span class="m"&gt;16&lt;/span&gt;: MD007 Unordered list indentation

husky - pre-commit hook failed &lt;span class="o"&gt;(&lt;/span&gt;add --no-verify to bypass&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nodeのプロセスで構文チェックを実行しているだけだが、意外と時間のかかる印象を持った。&lt;/p&gt;
&lt;p&gt;huskyのフックでテストさせるのは &lt;code&gt;"precommit"&lt;/code&gt; ではなく &lt;code&gt;"prepush"&lt;/code&gt; が良かったかも知れない。&lt;/p&gt;
&lt;h2&gt;CIサービスを使って自動テストさせる&lt;/h2&gt;
&lt;p&gt;ここまで来ると&lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt;や&lt;a href="https://circleci.com/"&gt;CircleCI&lt;/a&gt;といったCI as a Serviceを利用して、リポジトリへのプッシュやPull Requestの時に自動でテストを走らせることが可能になる。&lt;/p&gt;
&lt;p&gt;上記のサービスは2つとも、Nodeプロジェクトであれば暗黙的に &lt;code&gt;npm test&lt;/code&gt; が実行させるので、走らせるテストコマンドを特別に明示させる必要は無く、実行環境だけを設定ファイルに書いておけば上手くテストしてくれた。&lt;/p&gt;
&lt;h3&gt;Travis CI&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.travis.yml&lt;/code&gt; という名前のファイルを置く。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;node_js&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;node_js&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.12&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.10&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;iojs&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;CircleCI&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;circle.yml&lt;/code&gt; という名前のファイルを置く。というか、このファイルを置かなくても、サービス連携した時点で自動的にNodeのプロジェクトだと認識して、良い感じに動いてくれた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;machine&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;node&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;version&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0.10.22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;huskyかなり便利だと感じた&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install&lt;/code&gt; のタイミングで &lt;code&gt;.git&lt;/code&gt; の中にファイルを作ってくれるため、複数人開発で強制力のあるフックを実現できそう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Markdown構文チェックもやってみると便利だった&lt;ul&gt;
&lt;li&gt;そのまま使うとチェックルールが少し厳格な印象があるので、もう少しルールを細かく見てカスタマイズ設定した方が良さそうだった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Fri, 01 May 2015 20:05:32 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-05-01:/2015/05/01/lint-markdown-at-commit.html</guid><category>CI</category><category>Git</category><category>Markdown</category><category>Node</category></item><item><title>静的ページジェネレータHexoで作成したブログをGitHub Pagesで公開する</title><link>http://raimon49.github.io/2015/04/25/create-blog-with-hexo.html</link><description>&lt;p&gt;JavaScript / Node製の静的ページジェネレータである&lt;a href="https://github.com/hexojs/hexo"&gt;Hexo&lt;/a&gt;を使い、&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;で公開する手順について調べたのでまとめておく。&lt;/p&gt;
&lt;h2&gt;動機&lt;/h2&gt;
&lt;p&gt;調べた動機としては、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人気が上昇傾向で、特に中華圏での採用例が増えつつあるので使ってみたかった&lt;/li&gt;
&lt;li&gt;Node / npmの勉強用&lt;/li&gt;
&lt;li&gt;日本語の解説記事では古いバージョンのものが多く、現行バージョン3.x系では変わってしまった手順が多々あった&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などが挙げられる。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://staticsitegenerators.net/"&gt;Static Site Generators&lt;/a&gt;から引くと、GitHub Starの付けられた数が2015-04-25現在、3位に居る。このブログでも利用しているPelicanは抜かれて4位となっていた。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/static-site-generators-sort-by-star.png" alt="GitHub Starによるソート順" width="590" height="483" style="width: 590px; max-width: 100%; height: auto;"&gt;&lt;/p&gt;
&lt;p&gt;少なくとも2014年末時点ではPelicanの方が上だった筈だが、現在はHexoよりも上に居るのはGitHub上で人気のあるRuby製のJekyllとOctopressの2つだけとなっており、かなり勢いがあると言える。&lt;/p&gt;
&lt;h2&gt;ブログの準備&lt;/h2&gt;
&lt;p&gt;今回の環境は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node 0.12.2&lt;/li&gt;
&lt;li&gt;npm 2.7.4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を使っている。Node本体は0.10.x系でも問題無く動く筈である。&lt;/p&gt;
&lt;p&gt;Hexoのオフィシャルなインストール方法は &lt;code&gt;npm install hexo-cli -g&lt;/code&gt; だが、なるべくグローバル領域にインストールしない形で進めたいと考えて、実際にやってみたら可能だった。&lt;/p&gt;
&lt;p&gt;Gitリポジトリとしたいディレクトリに &lt;code&gt;hexo-cli&lt;/code&gt; をローカルインストールし、&lt;code&gt;$(npm bin)&lt;/code&gt; で実行コマンドのあるパスを取得してブログを準備する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install hexo

$ &lt;span class="k"&gt;$(&lt;/span&gt;npm bin&lt;span class="k"&gt;)&lt;/span&gt;/hexo init blog
INFO  Copying data to ~/works/git/hexo-use-sample/blog
INFO  You are almost &lt;span class="k"&gt;done&lt;/span&gt;! Don&lt;span class="s1"&gt;&amp;#39;t forget to run &amp;#39;&lt;/span&gt;npm install&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; before you start blogging with Hexo!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;引数で指定した &lt;code&gt;blog&lt;/code&gt; という名前のディレクトリが生成されているので、そこに入って &lt;code&gt;package.json&lt;/code&gt; に書かれた依存ライブラリをローカルインストールする。&lt;/p&gt;
&lt;p&gt;これだけで、 &lt;code&gt;hexo serve&lt;/code&gt; コマンドでローカルサーバが立ち上がり、 &lt;code&gt;4000&lt;/code&gt; ポートにウェブブラウザからアクセスすると、Hello, World記事のあるブログ画面が表示される。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; blog
$ npm install
$ &lt;span class="k"&gt;$(&lt;/span&gt;npm bin&lt;span class="k"&gt;)&lt;/span&gt;/hexo server
INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Hello, Worldブログ画面" src="/images/hexo-hello-world.png"&gt;&lt;/p&gt;
&lt;p&gt;Hexoのインストールを確認したら、一旦 &lt;code&gt;Ctrl+C&lt;/code&gt; でストップする。&lt;/p&gt;
&lt;h2&gt;ブログのテーマをインストールする&lt;/h2&gt;
&lt;p&gt;Hexoにも他のツールと同様に多数のテーマが用意されている。&lt;/p&gt;
&lt;p&gt;テーマは&lt;a href="https://github.com/hexojs/hexo/wiki/Themes"&gt;プロジェクトWikiページ&lt;/a&gt;でリスト化されている。今回はこの中から&lt;a href="https://github.com/ppoffice/hexo-theme-hueman"&gt;Hueman&lt;/a&gt;というテーマをインストールした。&lt;/p&gt;
&lt;p&gt;Hexoにおけるテーマのインストール方法は、ブログ内のディレクトリ &lt;code&gt;themes&lt;/code&gt; 以下に、テーマのGitリポジトリを丸ごとクローンして入れるという原始的な手順らしい。これは &lt;code&gt;themes/theme-name/_config.yml&lt;/code&gt; も評価して静的ページ生成するというHexoの設計も関係しているようだ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git://github.com/ppoffice/hexo-theme-hueman themes/hueman
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;長期的に運用して行きたい場合は、&lt;a href="http://japan.blogs.atlassian.com/2014/03/alternatives-to-git-submodule-git-subtree/"&gt;Git Subtree&lt;/a&gt;による管理を検討すると良いだろう。Git Submoduleは純粋に外部リポジトリの参照であるため、テーマリポジトリ内の設定ファイル変更をコミットしておけないからだ。&lt;/p&gt;
&lt;p&gt;テーマのGitリポジトリを取得したら、&lt;code&gt;blog/_config.yml&lt;/code&gt; で指定してデザインを適用する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;--- a/blog/_config.yml&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/blog/_config.yml&lt;/span&gt;
&lt;span class="gu"&gt;@@ -3,11 +3,11 @@&lt;/span&gt;
 ## Source: https://github.com/hexojs/hexo/

 # Site
&lt;span class="gd"&gt;-title: Hexo&lt;/span&gt;
&lt;span class="gi"&gt;+title: Hexo Use Sample Blog&lt;/span&gt;
 subtitle:
 description:
&lt;span class="gd"&gt;-author: John Doe&lt;/span&gt;
&lt;span class="gd"&gt;-language:&lt;/span&gt;
&lt;span class="gi"&gt;+author: raimon&lt;/span&gt;
&lt;span class="gi"&gt;+language: en&lt;/span&gt;
 timezone:

 # URL
&lt;span class="gu"&gt;@@ -62,9 +62,9 @@ pagination_dir: page&lt;/span&gt;
 # Extensions
 ## Plugins: http://hexo.io/plugins/
 ## Themes: http://hexo.io/themes/
&lt;span class="gd"&gt;-theme: landscape&lt;/span&gt;
&lt;span class="gi"&gt;+theme: hueman&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hexoの特徴として、中華圏のユーザーコミュニティが非常に厚く、テーマもデフォルトで言語設定が中国語となっているものが多い。&lt;/p&gt;
&lt;p&gt;よって &lt;code&gt;language: en&lt;/code&gt; としないと、メニューが中国語になってしまうテーマが幾つも見受けられた。Huemanテーマも同様だった。&lt;/p&gt;
&lt;p&gt;この状態で先ほどと同様にローカルサーバを立ち上げると、ブログのデザインが変わっていることが確認できる。&lt;/p&gt;
&lt;h2&gt;記事を投稿する&lt;/h2&gt;
&lt;p&gt;テーマの設定が完了したので、記事を作成してみる。&lt;/p&gt;
&lt;p&gt;自動生成されたHello, World記事はもう不要になるため消してしまい、&lt;code&gt;hexo new&lt;/code&gt; コマンドで自分の記事を作成する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git rm source/_posts/hello-world.md
rm &lt;span class="s1"&gt;&amp;#39;blog/source/_posts/hello-world.md&amp;#39;&lt;/span&gt;
$ git commit -m &lt;span class="s1"&gt;&amp;#39;Remove hello world post&amp;#39;&lt;/span&gt;

$ &lt;span class="k"&gt;$(&lt;/span&gt;npm bin&lt;span class="k"&gt;)&lt;/span&gt;/hexo new &lt;span class="s2"&gt;&amp;quot;hello-my-post&amp;quot;&lt;/span&gt;
INFO  Created: /path/to/repo/hexo-use-sample/blog/source/_posts/hello-my-post.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ローカルサーバで確認してOKだったら &lt;code&gt;git commit&lt;/code&gt; する。&lt;/p&gt;
&lt;h2&gt;ブログをGitHub Pagesで公開する&lt;/h2&gt;
&lt;p&gt;Hexoは設定ファイルでブログの公開先としてGitリポジトリが指定できる。&lt;/p&gt;
&lt;p&gt;この辺りはバージョン3.x系では別プラグインとして切り離されており、インストールが必要である。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install hexo-deployer-git --save
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;今回は次のような設定で公開することにした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リポジトリ名: &lt;code&gt;hexo-use-sample&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ブランチ名: &lt;code&gt;gh-pages&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;master&lt;/code&gt; ブランチでは記事の生成元となるMarkdown文書などを管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URL: &lt;code&gt;http://{username}.github.io/hexo-use-sample/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実際に &lt;code&gt;blog/_config.yml&lt;/code&gt; に反映すると以下のようになる。&lt;code&gt;type: git&lt;/code&gt; となっている点は注意（古いバージョンでは &lt;code&gt;type: github&lt;/code&gt; になっている）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;--- a/blog/_config.yml&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/blog/_config.yml&lt;/span&gt;
&lt;span class="gu"&gt;@@ -12,8 +12,8 @@ timezone:&lt;/span&gt;

 # URL
 ## If your site is put in a subdirectory, set url as &amp;#39;http://yoursite.com/child&amp;#39; and root as &amp;#39;/child/&amp;#39;
&lt;span class="gd"&gt;-url: http://yoursite.com&lt;/span&gt;
&lt;span class="gd"&gt;-root: /&lt;/span&gt;
&lt;span class="gi"&gt;+url: http://raimon49.github.io/hexo-use-sample/&lt;/span&gt;
&lt;span class="gi"&gt;+root: /hexo-use-sample/&lt;/span&gt;
 permalink: :year/:month/:day/:title/
 permalink_defaults:

&lt;span class="gu"&gt;@@ -67,4 +67,6 @@ theme: hueman&lt;/span&gt;
 # Deployment
 ## Docs: http://hexo.io/docs/deployment.html
 deploy:
&lt;span class="gd"&gt;-  type:&lt;/span&gt;
&lt;span class="gi"&gt;+  type: git&lt;/span&gt;
&lt;span class="gi"&gt;+  repo: git@github.com:raimon49/hexo-use-sample.git&lt;/span&gt;
&lt;span class="gi"&gt;+  branch: gh-pages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;また、グローバルではなくローカルに &lt;code&gt;hexo-cli&lt;/code&gt; をインストールした関係で、コマンド実行時に都度 &lt;code&gt;$(npm bin)&lt;/code&gt; で実行パスを取得していたが、&lt;code&gt;npm-scripts&lt;/code&gt; に定義して、覚えておかなくて良いようにする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;--- a/blog/package.json&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/blog/package.json&lt;/span&gt;
&lt;span class="gu"&gt;@@ -5,15 +5,21 @@&lt;/span&gt;
   &amp;quot;hexo&amp;quot;: {
     &amp;quot;version&amp;quot;: &amp;quot;3.0.1&amp;quot;
   },
&lt;span class="gi"&gt;+  &amp;quot;scripts&amp;quot;: {&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;quot;start&amp;quot;: &amp;quot;hexo server&amp;quot;,&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;quot;create&amp;quot;: &amp;quot;hexo new&amp;quot;,&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;quot;deploy&amp;quot;: &amp;quot;hexo deploy -g&amp;quot;&lt;/span&gt;
&lt;span class="gi"&gt;+  },&lt;/span&gt;
   &amp;quot;dependencies&amp;quot;: {
     &amp;quot;hexo&amp;quot;: &amp;quot;^3.0.0&amp;quot;,
&lt;span class="gi"&gt;+    &amp;quot;hexo-deployer-git&amp;quot;: &amp;quot;0.0.4&amp;quot;,&lt;/span&gt;
     &amp;quot;hexo-generator-archive&amp;quot;: &amp;quot;^0.1.0&amp;quot;,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考記事として&lt;a href="http://qiita.com/axross/items/a2a0d148e40b66074858"&gt;npm-scriptsについて&lt;/a&gt;と&lt;a href="http://qiita.com/Jxck_/items/efaff21b977ddc782971"&gt;npm で依存もタスクも一元化する&lt;/a&gt;を挙げておく。&lt;/p&gt;
&lt;p&gt;これで &lt;code&gt;package.json&lt;/code&gt; の実行タスクが定義された。その中から &lt;code&gt;deploy&lt;/code&gt; を実行すると、&lt;code&gt;master&lt;/code&gt; ブランチの内容から静的ページが生成されて &lt;code&gt;gh-pages&lt;/code&gt; ブランチとしてpushまで行き、自動的にGitHub Pagesで公開される。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm run
Lifecycle scripts included in hexo-site:
  start
    hexo server

available via &lt;span class="sb"&gt;`&lt;/span&gt;npm run-script&lt;span class="sb"&gt;`&lt;/span&gt;:
  create
    hexo new
  deploy
    hexo deploy -g

$ npm run deploy

&amp;gt; hexo-site@0.0.0 deploy /home/raimon49/works/git/hexo-use-sample/blog
&amp;gt; hexo deploy -g

Branch master &lt;span class="nb"&gt;set&lt;/span&gt; up to track remote branch gh-pages from git@github.com:raimon49/hexo-use-sample.git.
INFO  Deploy &lt;span class="k"&gt;done&lt;/span&gt;: git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;また、新しい記事の作成も次回からは &lt;code&gt;npm-scripts&lt;/code&gt; を使って可能になった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm run create &lt;span class="s2"&gt;&amp;quot;hexo-dependency&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;今回公開した記事は次のようなデザイン・内容になった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://raimon49.github.io/hexo-use-sample/2015/04/25/hello-my-post/"&gt;Hello my post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://raimon49.github.io/hexo-use-sample/2015/04/25/hexo-dependency/"&gt;hexo-dependency&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;タグを複数指定したい時は、記事生成元のMarkdownで &lt;code&gt;tags: [GitHub, Hexo]&lt;/code&gt; のように &lt;code&gt;[]&lt;/code&gt; で囲って並べると可能なようだ。&lt;/p&gt;
&lt;h2&gt;まとめと感想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hexoはグローバル領域にツールをインストールしなくても使えると分かった&lt;/li&gt;
&lt;li&gt;テーマインストールの項でも触れたが、中華圏のユーザーコミュニティが非常に活発で、詰まってFAQなどで情報を探した時にも実感した&lt;/li&gt;
&lt;li&gt;記事のMarkdownテンプレートを作ってくれたり、デプロイまで面倒を見てくれるコマンドラインツールの機能は便利だった&lt;/li&gt;
&lt;li&gt;ブログに特化しており、インストールしてすぐに画面を確認できる点も良い&lt;ul&gt;
&lt;li&gt;このお手軽さから、Static Site Generatorsでもっと上に行くかも知れないと感じた&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ページ生成にやや時間のかかる印象を持った&lt;ul&gt;
&lt;li&gt;Pelicanだと一瞬なので、プログラミング言語や設計の違いに拠るものか、今も絶賛改善中なのか、自分の知識では良く分からなかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sat, 25 Apr 2015 18:02:22 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-04-25:/2015/04/25/create-blog-with-hexo.html</guid><category>GitHub</category><category>Hexo</category><category>Node</category><category>Pelican</category></item><item><title>OS XでAndroid Studioインストール後の起動が進まなかった時の対処</title><link>http://raimon49.github.io/2015/04/19/android-studio-does-not-launching.html</link><description>&lt;p&gt;Android Studioをインストールして起動したが、最初の画面で「The following SDK components were not installed: extra-android-m2repository, tools, addon-google_apis-google-21, android-21, sys-img-x86-addon-google_apis-google-21, source-21, extra-google-m2repository」のようなメッセージが表示され、何度「Retry」ボタンを押して試みても成功しなかった。&lt;/p&gt;
&lt;h2&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OS X Yosemite 10.10.3&lt;/li&gt;
&lt;li&gt;JDK 8 u45&lt;/li&gt;
&lt;li&gt;Android Studio 1.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Proxy設定の変更で解消&lt;/h2&gt;
&lt;p&gt;メニューバー「Android Studio」-「Preferences」-「HTTP Proxy」より、「Auto-detect proxy settings」を選択、設定を反映。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Android Studio Proxy設定画面" src="/images/android-stdio-proxy-setting.png"&gt;&lt;/p&gt;
&lt;p&gt;一度Android Studioを終了し、ホームディレクトリの &lt;code&gt;~/.android&lt;/code&gt; を削除する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ rm -rf ~/.android
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上記を行ってからAndroid Studioを再び起動すると、処理が進んで失敗しなくなった。&lt;/p&gt;
&lt;h2&gt;参考情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/27376465/android-studio-doesnt-start-fails-saying-components-not-installed"&gt;Android Studio doesn't start, fails saying components not installed - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sun, 19 Apr 2015 11:19:19 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-04-19:/2015/04/19/android-studio-does-not-launching.html</guid><category>Android</category><category>Android Studio</category><category>Mac</category></item><item><title>Gitのsubmoduleをお手軽に削除する</title><link>http://raimon49.github.io/2015/04/04/git-submodule-deinit.html</link><description>&lt;p&gt;このブログに適用しているPelicanのテーマを乗り換えた。&lt;/p&gt;
&lt;h2&gt;submoduleで参照していた外部リポジトリを削除&lt;/h2&gt;
&lt;p&gt;&lt;a href="/2014/11/09/start-tech-blog-by-pelican.html"&gt;最初のエントリにも書いた&lt;/a&gt;通り、&lt;a href="https://github.com/raimon49/raimon49.github.io"&gt;ブログのリポジトリ&lt;/a&gt;では外部テーマを以下のように &lt;code&gt;vendor/theme-name&lt;/code&gt; というパスで外部参照している。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;repo
&lt;span class="sb"&gt;`&lt;/span&gt;-- vendor
    &lt;span class="sb"&gt;`&lt;/span&gt;-- theme-name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;今回はmolivierさんの&lt;a href="https://github.com/molivier/nest"&gt;nest&lt;/a&gt;というテーマに乗り換えたため、これまで使っていたテーマの外部参照は、ブログの記事を生成する際には不要となる。&lt;/p&gt;
&lt;p&gt;Gitのsubmoduleを削除するのは、以前は面倒な手順が必要だったが、最近は &lt;code&gt;git submodule deinit&lt;/code&gt; を使うと簡単らしい。今回もこんな感じで &lt;code&gt;.git&lt;/code&gt; 以下のメタファイルは編集しなくても削除できた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# submodule deinitでクリーンアップ&lt;/span&gt;
$ git submodule deinit vendor/pelican-sober
Cleared directory &lt;span class="s1"&gt;&amp;#39;vendor/pelican-sober&amp;#39;&lt;/span&gt;
Submodule &lt;span class="s1"&gt;&amp;#39;vendor/pelican-sober&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;git://github.com/fle/pelican-sober.git&lt;span class="o"&gt;)&lt;/span&gt; unregistered &lt;span class="k"&gt;for&lt;/span&gt; path &lt;span class="s1"&gt;&amp;#39;vendor/pelican-sober&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# ファイルパスを削除&lt;/span&gt;
$ git rm vendor/pelican-sober
rm &lt;span class="s1"&gt;&amp;#39;vendor/pelican-sober&amp;#39;&lt;/span&gt;

$ git status -s
M  .gitmodules
D  vendor/pelican-sober

&lt;span class="c1"&gt;# コミットして反映&lt;/span&gt;
$ git commit -a
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを &lt;code&gt;pull&lt;/code&gt; している側の反映手順でハマッた事があって、その時の対応方法は &lt;a href="https://gist.github.com/raimon49/9719585"&gt;Gistに書いた&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;git-submodule(1)&lt;/h2&gt;
&lt;p&gt;マニュアル &lt;code&gt;git-submodule(1)&lt;/code&gt; も引用して貼っておく。&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deinit
    Unregister the given submodules, i.e. remove the whole submodule.$name section from .git/config together with their
    work tree. Further calls to git submodule update, git submodule foreach and git submodule sync will skip any
    unregistered submodules until they are initialized again, so use this command if you don’t want to have a local
    checkout of the submodule in your work tree anymore. If you really want to remove a submodule from the repository and
    commit that use git-rm(1) instead.

    If --force is specified, the submodule’s work tree will be removed even if it contains local modifications.
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sat, 04 Apr 2015 21:00:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-04-04:/2015/04/04/git-submodule-deinit.html</guid><category>Git</category><category>Pelican</category></item><item><title>iOSアプリのコーディング規約を考える時はGoogleよりもNYTimesのObjective-Cスタイルガイドを参考にすべき</title><link>http://raimon49.github.io/2015/03/21/review-nytimes-objective-c-style-guide.html</link><description>&lt;h2&gt;Googleのスタイルガイドは古い&lt;/h2&gt;
&lt;p&gt;複数人でiOSアプリをObjective-Cコードで書いて保守する時、コーディング規約を検討することになる。&lt;/p&gt;
&lt;p&gt;参考にすべきスタイルガイドとして良く挙がるものに&lt;a href="http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml"&gt;Google Objective-C Style Guide&lt;/a&gt;があるが、これはいかんせん古い。メモリ管理ARCやNSNumberのリテラル構文など、比較的新しいトピックについても追記されてはいるが、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;インスタンス変数のアクセス修飾子&lt;ul&gt;
&lt;li&gt;プロパティを使う事が主流となっている2015年現在、余り扱われない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autorelease&lt;/code&gt; を使ったオブジェクト生成など、MRC時代の規約&lt;/li&gt;
&lt;li&gt;何よりホスティング先が&lt;a href="http://google-opensource.blogspot.jp/2015/03/farewell-to-google-code.html"&gt;サービス終了を発表されたGoogle Code&lt;/a&gt;であり、永続的な参照先として頼りない&lt;ul&gt;
&lt;li&gt;そのうちGitHubに移るのだとは考えられる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などなど、うっかりGoogleのスタイルガイドを参考にすると「旧時代のObjective-C」スタイルにどっぷり浸かる地雷を踏みかねない。&lt;/p&gt;
&lt;h2&gt;参考にすべきはNYTimesのスタイルガイド&lt;/h2&gt;
&lt;p&gt;では何を参考にするのが良いかと考えると、&lt;a href="https://github.com/NYTimes/objective-c-style-guide"&gt;NYTimes/objective-c-style-guide&lt;/a&gt;にホスティングされているNYTimesのスタイルガイドが良い。&lt;/p&gt;
&lt;p&gt;第三者からのPull Requestでメンテナンスされているため透明性が高く、何よりも内容がモダンである。&lt;/p&gt;
&lt;p&gt;iOSアプリの新規コードは徐々にSwiftに移って行くものと考えられるが、Objective-Cコードの保守も続くので、NYTimesのガイドを引用しつつ自分の考え方も整理してみたい。&lt;/p&gt;
&lt;p&gt;なお、ここで引用したスタイルガイドはコミット&lt;a href="https://github.com/NYTimes/objective-c-style-guide/tree/1265ed97ba85df89f36fb664cbecde1042fc1988"&gt;1265ed97ba85df89f36fb664cbecde1042fc1988&lt;/a&gt;時点の内容とする。&lt;/p&gt;
&lt;h2&gt;Dot-Notation Syntax&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Dot-notation should &lt;strong&gt;always&lt;/strong&gt; be used for accessing and mutating properties. Bracket notation is preferred in all other instances.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;UIColor&lt;/span&gt; &lt;span class="n"&gt;orangeColor&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UTIApplication&lt;/span&gt; &lt;span class="n"&gt;sharedApplication&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="nl"&gt;setBackgroundColor&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="bp"&gt;UIColor&lt;/span&gt; &lt;span class="n"&gt;orangeColor&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;span class="bp"&gt;UIApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;引数なしのメソッドはドット記法でも呼び出せるが、メソッドの呼び出しであればそうだと判別できるよう常にブラケット &lt;code&gt;[]&lt;/code&gt; で囲うべきだとする。&lt;/p&gt;
&lt;p&gt;他のプログラミング言語に慣れている人は後者の書き方を好んだりもするが、「保守し易いObjective-Cコード」を考える時、妥当なルール。&lt;/p&gt;
&lt;p&gt;またsetterメソッドでなくドット記法のプロパティアクセスを使っている点も大事。Stack Overflowなどで拾ったコードをコピペしていると、この辺りの記述は一貫性が失われがちである。&lt;/p&gt;
&lt;h2&gt;Spacing&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Indent using 4 spaces. Never indent with tabs. Be sure to set this preference in Xcode.&lt;/li&gt;
&lt;li&gt;Method braces and other braces (&lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;/&lt;code&gt;switch&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt; etc.) always open on the same line as the statement but close on a new line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;タブコードを使わず4 spacesによるインデントはXcode標準設定であり、妥当。&lt;/p&gt;
&lt;p&gt;なおGoogleのスタイルガイドは2 spacesを、GitHubのスタイルガイドはタブコードを採用している。Objective-Cはコードが横に長くなりがちなため、狭くしたい心情は理解できる。&lt;/p&gt;
&lt;h2&gt;Conditionals&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Conditional bodies should always use braces even when a conditional body could be written without braces (e.g., it is one line only) to prevent &lt;a href="https://github.com/NYTimes/objective-c-style-guide/issues/26#issuecomment-22074256"&gt;errors&lt;/a&gt;. These errors include adding a second line and expecting it to be part of the if-statement. Another, &lt;a href="http://programmers.stackexchange.com/a/16530"&gt;even more dangerous defect&lt;/a&gt; may happen where the line "inside" the if-statement is commented out, and the next line unwittingly becomes part of the if-statement. In addition, this style is more consistent with all other conditionals, and therefore more easily scannable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if文の条件に合致する処理は1行で書ける内容であっても、常にブレース &lt;code&gt;{}&lt;/code&gt; で囲って改行させる。『リーダブルコード』などでもお馴染みのトピックであり、きわめて妥当。&lt;/p&gt;
&lt;h2&gt;Ternary Operator&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The Ternary operator, ? , should only be used when it increases clarity or code neatness. A single condition is usually all that should be evaluated. Evaluating multiple conditions is usually more understandable as an if statement, or refactored into instance variables.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nl"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nl"&gt;c&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;d&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;三項演算子の入れ子をさせないというもの。&lt;/p&gt;
&lt;p&gt;個人的には括弧 &lt;code&gt;()&lt;/code&gt; で優先順を明示すれば、複数の入れ子もやって良いと考えるが、普通は1つに留めておくのが妥当だろう。&lt;/p&gt;
&lt;h2&gt;Error handling&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When methods return an error parameter by reference, switch on the returned value, not the error variable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;trySomethingWithError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Handle Error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;trySomethingWithError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Handle Error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;このルールはちょっと良く分からないところ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSError&lt;/code&gt; 変数にエラー情報を書き込んで非 &lt;code&gt;nil&lt;/code&gt; である事からハンドリングできれば良いし、さらにBOOLで返すのは、やや冗長な印象を受ける。&lt;/p&gt;
&lt;h2&gt;Methods&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In method signatures, there should be a space after the scope (-/+ symbol). There should be a space between the method segments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;For Example&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setExampleText:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt; &lt;span class="nf"&gt;image:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UIImage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-/+シンボルの後ろにスペースを入れる。妥当。&lt;/p&gt;
&lt;h2&gt;Variables&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Variables should be named as descriptively as possible. Single letter variable names should be avoided except in &lt;code&gt;for()&lt;/code&gt; loops.&lt;/p&gt;
&lt;p&gt;Asterisks indicating pointers belong with the variable, e.g., &lt;code&gt;NSString *text&lt;/code&gt; not &lt;code&gt;NSString* text&lt;/code&gt; or &lt;code&gt;NSString * text&lt;/code&gt;, except in the case of constants.&lt;/p&gt;
&lt;p&gt;Property definitions should be used in place of naked instance variables whenever possible. Direct instance variable access should be avoided except in initializer methods (&lt;code&gt;init&lt;/code&gt;, &lt;code&gt;initWithCoder:&lt;/code&gt;, etc…), &lt;code&gt;dealloc&lt;/code&gt; methods and within custom setters and getters. For more information on using Accessor Methods in Initializer Methods and dealloc, see &lt;a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmPractical.html#//apple_ref/doc/uid/TP40004447-SW6"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;NYTSection&lt;/span&gt;: &lt;span class="bp"&gt;NSObject&lt;/span&gt;

&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;NYTSection&lt;/span&gt; : &lt;span class="bp"&gt;NSObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ポインタ型のアスタリスクを型と変数のどちらに寄せるかは良く議論の対象になるが、自分もNYTimesのスタイルガイドと同じく変数側に寄せる方法を支持したい。&lt;/p&gt;
&lt;p&gt;Googleのスタイルガイドについて「古い」と指摘した通り、インスタンス変数の宣言ではなくプロパティの宣言を使うべきとしている点も含め、モダンで妥当なルール。&lt;/p&gt;
&lt;h2&gt;Naming&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Apple naming conventions should be adhered to wherever possible, especially those related to &lt;a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html"&gt;memory management rules&lt;/a&gt; (&lt;a href="http://stackoverflow.com/a/2865194/340508"&gt;NARC&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Long, descriptive method and variable names are good.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;UIButton&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;settingsButton&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Not&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;UIButton&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;setBut&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;単語を省略させるのは駄目だというルール。妥当。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A three letter prefix (e.g. &lt;code&gt;NYT&lt;/code&gt;) should always be used for class names and constants, however may be omitted for Core Data entity names. Constants should be camel-case with all words capitalized and prefixed by the related class name for clarity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;NSTimeInterval&lt;/span&gt; &lt;span class="n"&gt;NYTArticleViewControllerNavigationFadeAnimationDuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;NSTimeInterval&lt;/span&gt; &lt;span class="n"&gt;fadetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Objective-Cには言語機構として名前空間が存在しないため、クラス名および定数名にはプレフィックスを付与しようというもの。例えばNYTimesの作ったクラス名であれば、そこから取った &lt;code&gt;NYT&lt;/code&gt; と3文字を付与する。これは2文字のプレフィックスがAppleのフレームワーク用に予約済みであるため、妥当。 2文字のプレフィックスについて&lt;a href="https://github.com/NYTimes/objective-c-style-guide/pull/99"&gt;補足の追記をPRで投げたところ、マージしてくれた&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Properties and local variables should be camel-case with the leading word being lowercase.&lt;/p&gt;
&lt;p&gt;Instance variables should be camel-case with the leading word being lowercase, and should be prefixed with an underscore. This is consistent with instance variables synthesized automatically by LLVM. &lt;strong&gt;If LLVM can synthesize the variable automatically, then let it.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;プロパティとローカル変数は小文字から始まるキャメルケースを用いる、またObjective-Cにはプロパティ宣言とインスタンス変数を合成するための &lt;code&gt;@synthesize&lt;/code&gt; があるが、現在は自動でアンダースコアを付けて合成してくれるため、省略しておけば良いとしている。これも妥当だと思う。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// こう宣言したものは&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;myVariable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;instancetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// この名前でインスタンス変数にアクセス可能&lt;/span&gt;
        &lt;span class="n"&gt;_myVariable&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Comments&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When they are needed, comments should be used to explain &lt;strong&gt;why&lt;/strong&gt; a particular piece of code does something. Any comments that are used must be kept up-to-date or deleted.&lt;/p&gt;
&lt;p&gt;Block comments should generally be avoided, as code should be as self-documenting as possible, with only the need for intermittent, few-line explanations. This does not apply to those comments used to generate documentation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;「hogeオブジェクトを生成」「foo変数に代入」など、何やってるか一目瞭然で情報量ゼロのコメントは入れるなという話で、これも妥当。&lt;/p&gt;
&lt;p&gt;ブロックコメントをドキュメンテーション生成用のものには使って良いというルールについて補足をすると、Xcode 5からサポートされたJavadocライクな構文のことを指していると思われる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;Check whether a file at a given URL has a newer timestamp than a given file.&lt;/span&gt;
&lt;span class="cm"&gt;Example usage:&lt;/span&gt;
&lt;span class="cm"&gt;@code&lt;/span&gt;
&lt;span class="cm"&gt;NSURL *url1, *url2;&lt;/span&gt;
&lt;span class="cm"&gt;BOOL isNewer = [FileUtils&lt;/span&gt;
&lt;span class="cm"&gt;         isThisFileNewerThanThatFile:url1 thatURL:url2];&lt;/span&gt;
&lt;span class="cm"&gt;@endcode&lt;/span&gt;
&lt;span class="cm"&gt;@see http://www.dadabeatnik.com for more information.&lt;/span&gt;
&lt;span class="cm"&gt;@param thisURL&lt;/span&gt;
&lt;span class="cm"&gt;        The URL of the source file.&lt;/span&gt;
&lt;span class="cm"&gt;@param thatURL&lt;/span&gt;
&lt;span class="cm"&gt;        The URL of the target file to check.&lt;/span&gt;
&lt;span class="cm"&gt;@return YES if the timestamp of @c thatURL is newer than the timestamp of @c thisURL,&lt;/span&gt;
&lt;span class="cm"&gt;         otherwise NO.&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;isThisFileNewerThanThatFile:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSURL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;thisURL&lt;/span&gt; &lt;span class="nf"&gt;thatURL:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSURL&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;thatURL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;なおSwiftでは、このようなドキュメンテーション生成用のブロックコメントはreStで表現できるようになっている。&lt;/p&gt;
&lt;p&gt;参考情報を載せておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.dadabeatnik.com/2013/09/25/comment-docs-in-xcode-5/"&gt;Documenting your code with comments in Xcode 5 | dada beatnik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nshipster.com/swift-documentation/"&gt;Swift Documentation - NSHipster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;init and dealloc&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;dealloc&lt;/code&gt; methods should be placed at the top of the implementation, directly after the &lt;code&gt;@synthesize&lt;/code&gt; and &lt;code&gt;@dynamic&lt;/code&gt; statements. &lt;code&gt;init&lt;/code&gt; should be placed directly below the &lt;code&gt;dealloc&lt;/code&gt; methods of any class.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt; methods should be structured like this:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;instancetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// or call the designated initializer&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Custom initialization&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;イニシャライザ &lt;code&gt;init&lt;/code&gt; では、継承元のクラスが &lt;code&gt;self&lt;/code&gt; を生成して返せた場合のみ、自分で定義したカスタムクラス用の初期化を行うべきとするルール。Appleのガイドなどでも謳われており、妥当。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dealloc&lt;/code&gt; をimplementationの先頭で宣言しておくという点は今まで余り意識していなかった。&lt;/p&gt;
&lt;h2&gt;Literals&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;NSString&lt;/code&gt;, &lt;code&gt;NSDictionary&lt;/code&gt;, &lt;code&gt;NSArray&lt;/code&gt;, and &lt;code&gt;NSNumber&lt;/code&gt; literals should be used whenever creating immutable instances of those objects. Pay special care that &lt;code&gt;nil&lt;/code&gt; values not be passed into &lt;code&gt;NSArray&lt;/code&gt; and &lt;code&gt;NSDictionary&lt;/code&gt; literals, as this will cause a crash.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="l"&gt;@[&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Brian&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Matt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Chris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Alex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Steve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span class="l"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;productManagers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="l"&gt;@{&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;iPhone&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Kate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;iPad&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Kamal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Mobile Web&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Bill&amp;quot;&lt;/span&gt;&lt;span class="l"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;shouldUseLiterals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;@YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buildingZIPCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;@10018&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="nl"&gt;arrayWithObjects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Brian&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Matt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Chris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Alex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Steve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;productManagers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSDictionary&lt;/span&gt; &lt;span class="nl"&gt;dictionaryWithObjectsAndKeys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Kate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;iPhone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Kamal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;iPad&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Bill&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Mobile Web&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;shouldUseLiterals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithBool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buildingZIPCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithInteger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10018&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配列オブジェクトや辞書オブジェクトもリテラル構文で変数に代入した方がスッキリ見易いため、これも妥当である。Mutableな変数を作る場合もこれを使うと簡単になるのでオススメだ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// リテラル構文で宣言したNSArrayオブジェクトにmutableCopyメッセージを送る&lt;/span&gt;
&lt;span class="bp"&gt;NSMutableArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mutableNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="l"&gt;@[&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Brian&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Matt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Chris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Alex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Steve&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;Paul&amp;quot;&lt;/span&gt;&lt;span class="l"&gt;]&lt;/span&gt; &lt;span class="n"&gt;mutableCopy&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// なおnilを追加することは出来ないので、NSNullを使う&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mutableNames&lt;/span&gt; &lt;span class="nl"&gt;addObject&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="bp"&gt;NSNull&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;CGRect Functions&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When accessing the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, or &lt;code&gt;height&lt;/code&gt; of a &lt;code&gt;CGRect&lt;/code&gt;, always use the &lt;a href="http://developer.apple.com/library/ios/#documentation/graphicsimaging/reference/CGGeometry/Reference/reference.html"&gt;&lt;code&gt;CGGeometry&lt;/code&gt; functions&lt;/a&gt; instead of direct struct member access. From Apple's &lt;code&gt;CGGeometry&lt;/code&gt; reference:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All functions described in this reference that take CGRect data structures as inputs implicitly standardize those rectangles before calculating their results. For this reason, your applications should avoid directly reading and writing the data stored in the CGRect data structure. Instead, use the functions described here to manipulate rectangles and to retrieve their characteristics.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;CGRect&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGRectGetMinX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGRectGetMinY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGRectGetWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGRectGetHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;CGRect&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CGRect構造体から座標やサイズを取り出すのに「CGRectXXXX」で定義されている関数を使うと良いとするルール。&lt;/p&gt;
&lt;p&gt;ここもNYTimesのスタイルガイドを読むまで余り意識していなかったので気を付けたい。&lt;/p&gt;
&lt;h2&gt;Constants&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Constants are preferred over in-line string literals or numbers, as they allow for easy reproduction of commonly used variables and can be quickly changed without the need for find and replace. Constants should be declared as &lt;code&gt;static&lt;/code&gt; constants and not &lt;code&gt;#define&lt;/code&gt;s unless explicitly being used as a macro.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;NYTAboutViewControllerCompanyName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;The New York Times Company&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;CGFloat&lt;/span&gt; &lt;span class="n"&gt;NYTImageThumbnailHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;50.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define CompanyName @&amp;quot;The New York Times Company&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;#define thumbnailHeight 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;文字列定数であればNSStringのポインタに対して &lt;code&gt;const&lt;/code&gt; を付けて宣言する。これは自分も慣れるまでは後ろのfloatのようなスカラ値定数との間で良く混乱した。&lt;/p&gt;
&lt;p&gt;また定数名には先述のプレフィックスを付与し、上書きされてしまうdefineマクロを使わないとするルールも妥当である。&lt;/p&gt;
&lt;h2&gt;Enumerated Types&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When using &lt;code&gt;enum&lt;/code&gt;s, it is recommended to use the new fixed underlying type specification because it has stronger type checking and code completion. The SDK now includes a macro to facilitate and encourage use of fixed underlying types ? &lt;code&gt;NS_ENUM()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="nf"&gt;NS_ENUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSInteger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NYTAdRequestState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;NYTAdRequestStateInactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;NYTAdRequestStateLoading&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;NS_ENUM()&lt;/code&gt; マクロで宣言しておくとswitch～caseの中でチェックしてくれるので使った方が良い。妥当。&lt;/p&gt;
&lt;h2&gt;Bitmasks&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When working with bitmasks, use the &lt;code&gt;NS_OPTIONS&lt;/code&gt; macro.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="nf"&gt;NS_OPTIONS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSUInteger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NYTAdCategory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;NYTAdCategoryAutos&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;NYTAdCategoryJobs&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;NYTAdCategoryRealState&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;NYTAdCategoryTechnology&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ビットマスクの定数は &lt;code&gt;NS_OPTIONS()&lt;/code&gt; マクロで宣言する。妥当。&lt;/p&gt;
&lt;h2&gt;Private Properties&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Private properties should be declared in class extensions (anonymous categories) in the implementation file of a class. Named categories (such as &lt;code&gt;NYTPrivate&lt;/code&gt; or &lt;code&gt;private&lt;/code&gt;) should never be used unless extending another class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;NYTAdvertisement&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GADBannerView&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;googleAdView&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;ADBannerView&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;iAdView&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;UIWebView&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;adXWebView&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ここで言う「Private」は、「ヘッダファイルでクラス外部に公開する必要がない」という意味になる。&lt;/p&gt;
&lt;p&gt;Privateなプロパティは実装ファイル「MyClass.m」側でクラスエクステンションとして宣言することで、自クラス内からのみ使うプロパティという扱いにできる。妥当。&lt;/p&gt;
&lt;h2&gt;Image Naming&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Image names should be named consistently to preserve organization and developer sanity. They should be named as one camel case string with a description of their purpose, followed by the un-prefixed name of the class or property they are customizing (if there is one), followed by a further description of color and/or placement, and finally their state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;For example:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RefreshBarButtonItem&lt;/code&gt; / &lt;code&gt;RefreshBarButtonItem@2x&lt;/code&gt; and &lt;code&gt;RefreshBarButtonItemSelected&lt;/code&gt; / &lt;code&gt;RefreshBarButtonItemSelected@2x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArticleNavigationBarWhite&lt;/code&gt; / &lt;code&gt;ArticleNavigationBarWhite@2x&lt;/code&gt; and &lt;code&gt;ArticleNavigationBarBlackSelected&lt;/code&gt; / &lt;code&gt;ArticleNavigationBarBlackSelected@2x&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;画像ファイル名にもビュークラス名を入れるというルールの発想は無かった……。&lt;/p&gt;
&lt;h2&gt;Booleans&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Since &lt;code&gt;nil&lt;/code&gt; resolves to &lt;code&gt;NO&lt;/code&gt; it is unnecessary to compare it in conditions. Never compare something directly to &lt;code&gt;YES&lt;/code&gt;, because &lt;code&gt;YES&lt;/code&gt; is defined to 1 and a &lt;code&gt;BOOL&lt;/code&gt; can be up to 8 bits.&lt;/p&gt;
&lt;p&gt;This allows for more consistency across files and greater visual clarity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;someObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someObject&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;nil&lt;/code&gt; は元々falsyに評価されるため、わざわざ比較しなくて良いという話。たしかに。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;For a &lt;code&gt;BOOL&lt;/code&gt;, here are two examples:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isAwesome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;someObject&lt;/span&gt; &lt;span class="n"&gt;boolValue&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isAwesome&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Never do this.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;someObject&lt;/span&gt; &lt;span class="n"&gt;boolValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同様に、YES/NOとの比較も冗長であるとするルール。妥当。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the name of a &lt;code&gt;BOOL&lt;/code&gt; property is expressed as an adjective, the property can omit the “is” prefix but specifies the conventional name for the get accessor, for example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;getter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;isEditable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;editable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;形容詞を採用するBOOL型のプロパティでは「is」プレフィックスを省略可能だが、その場合はゲッターメソッドに「is」を付与しておこうとするもの。好ましいルールだと思う。&lt;/p&gt;
&lt;h2&gt;Singletons&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Singleton objects should use a thread-safe pattern for creating their shared instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;instancetype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;sharedInstance&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;dispatch_once_t&lt;/span&gt; &lt;span class="n"&gt;onceToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;dispatch_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;onceToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Objective-CにおけるスレッドセーフなSingletonオブジェクトの生成コード。もはや定型句なので、テンプレートとしてXcodeに突っ込んでおくのが良い。&lt;/p&gt;
&lt;p&gt;参考にすべき日本語資料として&lt;a href="http://www.toyship.org/archives/1770"&gt;Objective-CのSingleton、その歴史的経緯など&lt;/a&gt;というエントリが挙げられる。&lt;/p&gt;
&lt;h2&gt;Imports&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If there is more than one import statement, group the statements &lt;a href="http://ashfurrow.com/blog/structuring-modern-objective-c"&gt;together&lt;/a&gt;. Commenting each group is optional.&lt;/p&gt;
&lt;p&gt;Note: For modules use the &lt;a href="http://clang.llvm.org/docs/Modules.html#using-modules"&gt;@import&lt;/a&gt; syntax.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Frameworks&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QuartzCore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Models&lt;/span&gt;
&lt;span class="cp"&gt;#import &amp;quot;NYTUser.h&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;// Views&lt;/span&gt;
&lt;span class="cp"&gt;#import &amp;quot;NYTButton.h&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#import &amp;quot;NYTUserView.h&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;importするファイルごとにグルーピングをせよというルール。&lt;/p&gt;
&lt;p&gt;余り意識していなかったが、外部Frameworkを先頭にしておくのは妥当だろう。&lt;/p&gt;
&lt;h2&gt;Xcode project&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The physical files should be kept in sync with the Xcode project files in order to avoid file sprawl. Any Xcode groups created should be reflected by folders in the filesystem. Code should be grouped not only by type, but also by feature for greater clarity.&lt;/p&gt;
&lt;p&gt;When possible, always turn on "Treat Warnings as Errors" in the target's Build Settings and enable as many &lt;a href="http://boredzo.org/blog/archives/2009-11-07/warnings"&gt;additional warnings&lt;/a&gt; as possible. If you need to ignore a specific warning, use &lt;a href="http://clang.llvm.org/docs/UsersManual.html#controlling-diagnostics-via-pragmas"&gt;Clang's pragma feature&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Xcodeのプロジェクトエクスプローラにおけるグループと、ファイルシステム上のディレクトリツリーを動機しておくべきとするルール。&lt;/p&gt;
&lt;p&gt;確かにXcodeのグループ機能は好き勝手に分けてしまえるので、リポジトリなどのツリーも揃えておく方が好ましい。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;2015年3月現在、GoogleのスタイルガイドよりもNYTimesのスタイルガイドの方がモダンObjective-Cの流れに沿っていると言えるため、コーディング規約を考える時は後者を参考にするべき。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sat, 21 Mar 2015 19:36:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-03-21:/2015/03/21/review-nytimes-objective-c-style-guide.html</guid><category>iOS</category><category>Objective-C</category><category>Xcode</category></item><item><title>svn:ignoreの無視ファイル設定を.gitignoreに移行する</title><link>http://raimon49.github.io/2015/01/27/migrate-ignore-from-svn-to-git.html</link><description>&lt;p&gt;SubversionからGitに完全移行したい際には&lt;a href="https://github.com/nirvdrum/svn2git"&gt;svn2git&lt;/a&gt;というRubyGemsで配布されているツールを使う事が多い。&lt;/p&gt;
&lt;p&gt;この時、Subversionリポジトリで設定していたバージョン管理外としたいファイルの無視リストである「svn:ignore」属性は、変換されたGitリポジトリに引き継がれない。&lt;/p&gt;
&lt;p&gt;公式issueを見ても対応予定が無さそうだったので、無視リストの移行方法を調査・検討した。&lt;/p&gt;
&lt;h2&gt;git-svnのサブコマンドshow-ignoreを使う&lt;/h2&gt;
&lt;p&gt;システム任せに移行する方法の一つとして、git-svnリポジトリ形式に変換すると使える&lt;a href="http://git-scm.com/book/ja/v1/Git%E3%81%A8%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E9%80%A3%E6%90%BA-Git-%E3%81%A8-Subversion"&gt;create-ignoreやshow-ignore&lt;/a&gt;がある。&lt;/p&gt;
&lt;p&gt;先述のsvn2gitでは完全なGitリポジトリ形式に変換されてしまっているため、これとは別途で次のように用意する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Subversion側のHEADコミットだけあれば良い&lt;/span&gt;
$ git svn clone -r HEAD -s /path/to/svn/repo my-git-svn
$ &lt;span class="nb"&gt;cd&lt;/span&gt; my-git-svn

&lt;span class="c1"&gt;# 「svn:ignore」をまとめて標準出力し確認&lt;/span&gt;
$ git svn show-ignore

&lt;span class="c1"&gt;# .gitignoreとして使用&lt;/span&gt;
$ git svn show-ignore &amp;gt; .gitignore
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Subversion側のリビジョンが育っている場合、このコマンドはかなり待たされる。&lt;/p&gt;
&lt;h2&gt;svn pgetコマンドの結果を加工する&lt;/h2&gt;
&lt;p&gt;checkoutしたSubversionリポジトリの「svn:ignore」属性を再帰的に取得し、加工する方法もある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Subversion側のHEADコミットだけあれば良い&lt;/span&gt;
$ svn co -r HEAD /path/to/svn/repo/trunk repo/trunk
$ &lt;span class="nb"&gt;cd&lt;/span&gt; repo/trunk

&lt;span class="c1"&gt;# 「svn:ignore」属性を再帰的に取得&lt;/span&gt;
$ svn pget svn:ignore -R

&lt;span class="c1"&gt;# 取得結果を加工して.gitignoreの雛形として出力し確認&lt;/span&gt;
$ svn pget svn:ignore -R &lt;span class="p"&gt;|&lt;/span&gt; grep -v &lt;span class="s2"&gt;&amp;quot;^&lt;/span&gt;$&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;&amp;quot;s/\(\(.*\) - \)\(.*\)/\2\/\3/g&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort

&lt;span class="c1"&gt;# .gitignoreとして使用&lt;/span&gt;
$ svn pget svn:ignore -R &lt;span class="p"&gt;|&lt;/span&gt; grep -v &lt;span class="s2"&gt;&amp;quot;^&lt;/span&gt;$&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;&amp;quot;s/\(\(.*\) - \)\(.*\)/\2\/\3/g&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort &amp;gt; .gitignore
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;その他のSubversionで使っていた属性&lt;/h2&gt;
&lt;p&gt;Subversionのディレクトリ単位で付与できる属性は「svn:ignore」以外にも色々あるが、引き継いで持って行きたいものは「svn:externals」くらいだろう。以下のようにするとリスト出力できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ svn plist -v -R
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;「svn:externals」属性で外部参照していたリポジトリも自分達の管理下にあるソースツリーであれば、同様にsvn2gitで変換してgit-submoduleまたはgit-subtreeで代替させるのが良いと思われる。3rd party管理下の場合は、丸ごと食わせるか、自分達でGitリポジトリを用意するか、いずれにしろ諦めて二重管理が発生することになる。&lt;/p&gt;
&lt;p&gt;以下の属性は、Gitへ完全移行できたなら不要と考えて良い。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;svn:executable&lt;/li&gt;
&lt;li&gt;svn:mime-type&lt;/li&gt;
&lt;li&gt;svn:eol-style&lt;/li&gt;
&lt;li&gt;svn:keywords&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特にキーワード展開はCVS時代からの呪いのように使いたがる人が居るが、git-blameの情報で十分なので、無理に努力してノイズになるような情報を別途で埋め込む必要は無い。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Tue, 27 Jan 2015 23:13:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2015-01-27:/2015/01/27/migrate-ignore-from-svn-to-git.html</guid><category>Git</category><category>Subversion</category></item><item><title>iOS 8では「Appのバックグラウンド更新」がOFFでもバックグラウンドで位置情報の更新は通知される</title><link>http://raimon49.github.io/2014/12/27/ios8-location-updates.html</link><description>&lt;h2&gt;バックグラウンドでの位置情報取得&lt;/h2&gt;
&lt;p&gt;バックグラウンドに回されても位置情報を取得し続けるロガーアプリのような機能を実装したい場合、Xcodeの「Capabilities」-「Background modes」-「Location updates」にチェックを入れてアプリバイナリをビルドし、バッテリーをほとんど消費せずに済む&lt;a href="https://developer.apple.com/library/mac/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html"&gt;CLLocationManager&lt;/a&gt;クラスの &lt;code&gt;significantLocationChange&lt;/code&gt; を監視し、帯電話基地局の切り替わりによる大規模な位置情報の更新を通知してもらう方法が定石である。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Xcode設定画面" src="/images/xcode-location-updates-setting.png"&gt;&lt;/p&gt;
&lt;h2&gt;「Appのバックグラウンド更新」権限による影響&lt;/h2&gt;
&lt;p&gt;この時、iOS 7ではユーザーがアプリ毎に許可を与える「Appのバックグラウンド更新」という権限がONでなければ位置情報の更新が通知されなかった。iOS 7リリース当時のネットメディア記事などにも、この制限が書かれて残っている。参考：&lt;a href="http://news.mynavi.jp/articles/2013/11/23/iphone_why131/"&gt;「Appのバックグラウンド更新」はオフにしてもだいじょうぶ? - いまさら聞けないiPhoneのなぜ | マイナビニュース&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「Appのバックグラウンド更新」をオフにすると、バックグラウンドに回ったアプリは動作を禁止されます。たとえば、ランニングの経路を測るアプリの場合、他のアプリを起動してしまうとGPSログを取得できなくなります。電話の着信があったときなど、他のアプリを起動せざるをえない場面の多さを考えると、このスイッチをオフにすることの意味がわかると思います。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;許可されているか否かは以下のプロパティから取得できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;UIBackgroundRefreshStatus&lt;/span&gt; &lt;span class="n"&gt;backgroundRefreshStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;UIApplication&lt;/span&gt; &lt;span class="n"&gt;sharedApplication&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;backgroundRefreshStatus&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;しかしながら、iOS 8からは、この設定がONでもOFFでも、大規模な位置情報の更新は通知されるようになった。&lt;/p&gt;
&lt;p&gt;ただしiOS側から自動でスケジューリングしてバックグラウンド処理をさせてくれる「Background fetch」を使う場合は、iOS 7/8どちらの場合もこの設定がONであることが引き続き求められる。&lt;/p&gt;
&lt;p&gt;ミニマムなコードで表現すると次のような感じになる。iOS 8以降、最初に位置情報を取得しようとする時に必要となった &lt;code&gt;kCLAuthorizationStatusAuthorizedAlways&lt;/code&gt; をリクエストする処理に関しては今回の調査と関係無いため省略している。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;AppDelegate&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;CLLocationManagerDelegate&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;CLLocationManager&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;locationManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;

&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="nc"&gt;AppDelegate&lt;/span&gt;


&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;application:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UIApplication&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;application&lt;/span&gt;
    &lt;span class="nf"&gt;didFinishLaunchingWithOptions:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;launchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 大規模位置情報更新の監視を開始し、更新の通知を自身で受け取る&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locationManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;CLLocationManager&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locationManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locationManager&lt;/span&gt; &lt;span class="n"&gt;startMonitoringSignificantLocationChanges&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Background fetchの登録&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="nl"&gt;setMinimumBackgroundFetchInterval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;UIApplicationBackgroundFetchIntervalMinimum&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#pragma mark - CLLocationManagerDelegate&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;locationManager:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;CLLocationManager&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;manager&lt;/span&gt;
     &lt;span class="nf"&gt;didUpdateLocations:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;locations&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locationManager&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 大規模位置情報更新の通知&lt;/span&gt;
        &lt;span class="c1"&gt;// iOS 7ではコールバックされるには「Appのバックグラウンド更新」許可が必要&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#pragma mark - Background fetch&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;application:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UIApplication&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;application&lt;/span&gt;
    &lt;span class="nf"&gt;performFetchWithCompletionHandler:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;UIBackgroundFetchResult&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="nv"&gt;completionHandler&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Background Fetchの発火&lt;/span&gt;
    &lt;span class="c1"&gt;// iOS 7/8どちらもコールバックされるには「Appのバックグラウンド更新」許可が必要&lt;/span&gt;

    &lt;span class="n"&gt;UIBackgroundFetchResult&lt;/span&gt; &lt;span class="n"&gt;fetchResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIBackgroundFetchResultNoData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* some background code successed */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fetchResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIBackgroundFetchResultNewData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;dispatch_after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dispatch_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int64_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 30秒以内に処理完了させる必要がある&lt;/span&gt;
        &lt;span class="n"&gt;completionHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fetchResult&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;iOS 7からサポートされるようになったリモートプッシュの1つであるSilent notificationの到達についても、「Appのバックグラウンド更新」の影響を受けるかどうかがiOS 8とで変わったような感触があるのだけど、もう手元に検証用端末としてiOS 7.xのものが残っていないのでハッキリとは分からない。リモートプッシュは検証環境を作るだけで大変なので多分やらない。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sat, 27 Dec 2014 15:17:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2014-12-27:/2014/12/27/ios8-location-updates.html</guid><category>Objective-C</category><category>Xcode</category><category>iOS</category></item><item><title>Xcode 6.xからNSObjectはdescriptionプロパティを持っている</title><link>http://raimon49.github.io/2014/12/23/nsobject-has-description-property.html</link><description>&lt;h2&gt;descriptionメソッド&lt;/h2&gt;
&lt;p&gt;Objective-Cでクラスを宣言する場合、通常 &lt;code&gt;NSObject&lt;/code&gt; を継承する。&lt;/p&gt;
&lt;p&gt;この時に &lt;code&gt;description&lt;/code&gt; メソッドをオーバーライドすることで、&lt;code&gt;NSLog()&lt;/code&gt; などで自動的に評価され、オブジェクトの概要を表現することができる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// MyClass.h&lt;/span&gt;
&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="bp"&gt;MyClass&lt;/span&gt; : &lt;span class="bp"&gt;NSObject&lt;/span&gt;

&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;

&lt;span class="c1"&gt;// MyClass.m&lt;/span&gt;
&lt;span class="k"&gt;@implementation&lt;/span&gt; &lt;span class="bp"&gt;MyClass&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;description&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="nl"&gt;stringWithFormat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;this object name: %@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;

&lt;span class="c1"&gt;// Use MyClass&lt;/span&gt;
&lt;span class="bp"&gt;MyClass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;my object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// this object name: my object&lt;/span&gt;
&lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;%@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Xcode 6.xにおける実行時エラー&lt;/h2&gt;
&lt;p&gt;Xcode 6.xでは以下のように自分でクラスを宣言して &lt;code&gt;description&lt;/code&gt; というプロパティを作って使うと、実行時エラーが発生じてクラッシュするようになった。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// MyClass.h&lt;/span&gt;
&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="bp"&gt;MyClass&lt;/span&gt; : &lt;span class="bp"&gt;NSObject&lt;/span&gt;

&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;

&lt;span class="c1"&gt;// Use MyClass&lt;/span&gt;
&lt;span class="bp"&gt;MyClass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;klass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;my object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;my description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// -[MyClass setDescription:]: unrecognized selector sent to instance 0x7fc6eb465bb0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;プロパティとして &lt;code&gt;description&lt;/code&gt; という名前を宣言しただけでも警告が出る。&lt;/p&gt;
&lt;h2&gt;Xcode 6.xにおけるNSObject.h&lt;/h2&gt;
&lt;p&gt;この理由は、継承元である &lt;code&gt;NSObject&lt;/code&gt; のヘッダファイルを見ると分かる。&lt;/p&gt;
&lt;p&gt;全てを載せると長くなるので、関係する箇所だけ抜粋する。この内容はVersion 6.1.1 (6A2008a)時点のヘッダファイルである。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@protocol&lt;/span&gt; &lt;span class="bp"&gt;NSObject&lt;/span&gt;

&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;readonly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@optional&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;readonly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;debugDescription&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;

&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="bp"&gt;NSObject&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;NSObject&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;isa&lt;/span&gt;  &lt;span class="n"&gt;OBJC_ISA_AVAILABILITY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（ちょっとややこしいが） &lt;code&gt;NSObject&lt;/code&gt; が適合している &lt;code&gt;NSObject&lt;/code&gt; プロトコルにおいて &lt;code&gt;description&lt;/code&gt; は &lt;code&gt;readonly&lt;/code&gt; 属性のプロパティとして宣言されているため、自分が宣言したクラスの中で &lt;code&gt;description&lt;/code&gt; を再定義して暗黙的に &lt;code&gt;readwrite&lt;/code&gt; な属性とすることはできないと云うことになる。&lt;/p&gt;
&lt;p&gt;モダンなObjective-Cを書いている人には自明だが、プロパティとして &lt;code&gt;description&lt;/code&gt; 宣言した場合、暗黙的にインスタンス変数 &lt;code&gt;_description&lt;/code&gt; が作成され、セッターとゲッターに相当する以下のメソッドが &lt;code&gt;@synthesize&lt;/code&gt; で合成される。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setDescription:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;description&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;description&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この時、Xcode 6.xからは親クラス &lt;code&gt;NSObject&lt;/code&gt; で &lt;code&gt;readonly&lt;/code&gt; として定義された &lt;code&gt;description&lt;/code&gt; に対応する &lt;code&gt;setDescription:&lt;/code&gt; にメッセージを送ることは不可能で、もし送信すると実行時エラーが発生することになる。&lt;/p&gt;
&lt;p&gt;元々 &lt;code&gt;description&lt;/code&gt; メソッドの存在は開発者には知られており、予約語みたいなものだったため、その性格をより強調する意味で明示的にプロパティとして持つようになったのだと考えらえる。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Tue, 23 Dec 2014 19:06:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2014-12-23:/2014/12/23/nsobject-has-description-property.html</guid><category>Mac</category><category>Objective-C</category><category>Xcode</category></item><item><title>Java 7でオブジェクト同士を比較する時のnullチェックはユーティリティメソッドに任せられる</title><link>http://raimon49.github.io/2014/12/08/java7-objects-equals.html</link><description>&lt;h2&gt;不毛な議論&lt;/h2&gt;
&lt;p&gt;Javaでしばしば不毛な議論の対象となるのが &lt;code&gt;null&lt;/code&gt; チェックのお作法で、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// NullPointerExceptionが発生し得る&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;変数 &lt;code&gt;foo&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; だった時に例外が発生してしまうから、必ず &lt;code&gt;null&lt;/code&gt; チェックを併記しようとか、定数を先に書く規約にしようと云う話になりがち。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 先にnullでないことをチェック&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// fooがnullでもNullPointerExceptionは発生しない&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;しかし個人的にはどちらも好きじゃなかった。&lt;/p&gt;
&lt;p&gt;特に後者は大昔のC言語のようで好きになれない。&lt;/p&gt;
&lt;h2&gt;Java 7から使えるユーティリティメソッド&lt;/h2&gt;
&lt;p&gt;ところがJava 7からは&lt;a href="http://www.infoq.com/jp/news/2009/09/jdk7-java-utils-object"&gt;JDK 7: java.util.Objectsに欲しい、頻繁に書かれるユーティリティメソッドは?&lt;/a&gt;で解説されているような &lt;code&gt;java.util.Objects.equals(Object a, Object b)&lt;/code&gt; を使って比較すれば、 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; いずれかの引数が &lt;code&gt;null&lt;/code&gt; だった時も考慮して比較結果を返してくれるようだ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// fooがnullでも&amp;quot;bar&amp;quot;でも比較結果はfalseが返される&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再帰的に比較してくれる &lt;code&gt;java.util.Objects.deepEquals(Object a, Object b)&lt;/code&gt; なるメソッドや、引数 &lt;code&gt;o&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; だった時にデフォルト文字列を指定できる &lt;code&gt;java.util.Objects.toString(Object o, String nullDefault)&lt;/code&gt; などなど、多くのJavaプログラマが泣いてきた定型パターンで楽をさせてもらえそうなユーティリティクラスだった。&lt;/p&gt;
&lt;p&gt;もちろん、こういうの自前で定義して使ってたよって人も山ほど居るだろうけど、標準APIに用意されているなら「これ使おうよ」で議論が終わるから便利。積極的に使って行きたい。&lt;/p&gt;
&lt;h2&gt;参考情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.oracle.com/javase/jp/7/api/java/util/Objects.html" title="Objects (Java Platform SE 7 )"&gt;Objects (Java Platform SE 7 )&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Mon, 08 Dec 2014 21:55:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2014-12-08:/2014/12/08/java7-objects-equals.html</guid><category>Java</category></item><item><title>PelicanにDisqusでコメント欄を埋め込む</title><link>http://raimon49.github.io/2014/11/20/embed-comments-in-pelican.html</link><description>&lt;p&gt;Pelicanで構築したこのブログにコメント欄を埋め込む方法は無いものかとオンラインヘルプを確認したところ、&lt;a href="http://docs.getpelican.com/en/3.5.0/settings.html"&gt;Settingsの頁&lt;/a&gt;で &lt;code&gt;DISQUS_SITENAME&lt;/code&gt; というパラメータが紹介されていた。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pelican can handle Disqus comments. Specify the Disqus sitename identifier here.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これを使えばコメント機能が埋め込めそうだと分かり、早速設定した。&lt;/p&gt;
&lt;h2&gt;Disqusでアカウントとコメントを埋め込むサイトを作成&lt;/h2&gt;
&lt;p&gt;まずDisqusでアカウントを作成する。&lt;/p&gt;
&lt;p&gt;TwitterアカウントのOAuth経由で作成するボタンを押してみたが、これは単にTwitter連携機能が自動ONになるだけで、別にアカウント作成に必要な情報（メールアドレスやパスワード等）がスキップできる訳では無かった。&lt;/p&gt;
&lt;p&gt;アカウントを作成したら、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://disqus.com/admin/create/"&gt;Add Disqus to your site&lt;/a&gt;でサイト名（ブログ名）を入力する。&lt;/li&gt;
&lt;li&gt;サイト名から自動で「your unique Disqus URL」の項目も埋まるので、ユニーク性に違反していなければ、そのままにする。&lt;/li&gt;
&lt;li&gt;Categoryは「Tech」とした。&lt;/li&gt;
&lt;li&gt;作成したDisqus URLの &lt;code&gt;{myblog}.disqus.com&lt;/code&gt; の &lt;strong&gt;myblog&lt;/strong&gt; 部分を &lt;code&gt;pelicanconf.py&lt;/code&gt; に設定する。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;steeldragon14106&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この状態でローカルサーバに反映すれば、記事ごとの個別URLを開くと、コメント欄が埋め込まれた状態で確認できた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fab rebuild
$ fab serve
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Thu, 20 Nov 2014 23:12:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2014-11-20:/2014/11/20/embed-comments-in-pelican.html</guid><category>Pelican</category><category>Python</category></item><item><title>Homebrewでインストール済みパッケージが更新後に「already installed, it's just not linked」と言われた時の対応</title><link>http://raimon49.github.io/2014/11/18/homebrew-bottle-mercurial.html</link><description>&lt;p&gt;少しの間触っていなかったMac miniで、パッケージ管理ツールHomebrewで入れているコマンド群を &lt;code&gt;brew update &amp;amp;&amp;amp; brew upgrade&lt;/code&gt; を実行したところ、分散バージョン管理システムMercurialの &lt;code&gt;hg&lt;/code&gt; コマンドを実行しようとすると「already installed, it's just not linked」怒られるようになってしまった。&lt;/p&gt;
&lt;h2&gt;対応方法&lt;/h2&gt;
&lt;p&gt;次のように &lt;code&gt;brew link&lt;/code&gt; を実行したら、 最新の &lt;code&gt;hg&lt;/code&gt; コマンドが使えるように解決した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew link --overwrite mercurial
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;原因&lt;/h2&gt;
&lt;p&gt;多分だけど、HomebrewのMercurialパッケージがbottle化されたことが原因のように考えられる。&lt;/p&gt;
&lt;p&gt;bottleというのは、いわゆるaptやyumのようなバイナリ配布形式で、Mercurial 2.xまでは &lt;code&gt;brew install mercurial&lt;/code&gt; を実行した時はソースコードをダウンロードして来てビルドする挙動だったように記憶している。これがバイナリ配布形式に変わって、 &lt;code&gt;brew link --overwrite&lt;/code&gt; が必要になったのではないか。現に&lt;a href="https://github.com/Homebrew/homebrew/commits/master/Library/Formula/mercurial.rb"&gt;Formula/mercurial.rbのコミットログ&lt;/a&gt;を参照すると、Mercurial 3.0.1前後にbottle云々というものが登場する。&lt;/p&gt;
&lt;p&gt;Homebrewも使い始めた頃は大半のパッケージが手元でビルドされていて、単なるMakefileラッパー + 管理システムのような印象のツールだったけど、2014-11現在ではbottleとしてバイナリ配布されるパッケージが増えているのを感じる。サクサクと短い時間でインストールが完了するようになって便利だ。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Tue, 18 Nov 2014 23:05:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2014-11-18:/2014/11/18/homebrew-bottle-mercurial.html</guid><category>Homebrew</category><category>Mac</category><category>Mercurial</category></item><item><title>Fabricで複数ホストに対して実行した結果を使って何かする</title><link>http://raimon49.github.io/2014/11/16/fabric-multiple-result.html</link><description>&lt;p&gt;お手軽デプロイ・システム管理ツールFabricで各タスクを実行した結果を使って何かしたい時には、 &lt;code&gt;execute(task_name)&lt;/code&gt; でホスト毎の結果が辞書オブジェクトとして変数に格納できる。この時、親となるタスクには重複実行されないよう &lt;code&gt;@runs_once&lt;/code&gt; を付ける。&lt;/p&gt;
&lt;p&gt;例えば、以下のようにタスクを定義する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use_ssh_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="nd"&gt;@runs_once&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_is_ubuntu_servers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;detect_is_ubuntu_server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detect_is_ubuntu_server&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;unix_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;uname -a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quiet&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_is_ubuntu_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unix_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_is_ubuntu_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unix_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;unix_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ubuntu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを複数のLinuxディストリビューションを採用している複数ホストに対して実行すると、そのサーバがUbuntuを使っているか、ホスト名をキー値に持つ辞書オブジェクトで取得できる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fab print_is_ubuntu_servers -H centos.host,ubuntu.host
&lt;span class="o"&gt;[&lt;/span&gt;centos.host&lt;span class="o"&gt;]&lt;/span&gt; Executing task &lt;span class="s1"&gt;&amp;#39;print_is_ubuntu_servers&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;centos.host&lt;span class="o"&gt;]&lt;/span&gt; Executing task &lt;span class="s1"&gt;&amp;#39;detect_is_ubuntu_server&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;ubuntu.host&lt;span class="o"&gt;]&lt;/span&gt; Executing task &lt;span class="s1"&gt;&amp;#39;detect_is_ubuntu_server&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;centos.host&amp;#39;&lt;/span&gt;: False, &lt;span class="s1"&gt;&amp;#39;ubuntu.host&amp;#39;&lt;/span&gt;: True&lt;span class="o"&gt;}&lt;/span&gt;

Done.
Disconnecting from user@centos.host... &lt;span class="k"&gt;done&lt;/span&gt;.
Disconnecting from user@ubuntu.host... &lt;span class="k"&gt;done&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;複数ホストの実行結果を &lt;code&gt;results&lt;/code&gt; で受け取ることで、さらに &lt;code&gt;confirm()&lt;/code&gt; で実行ユーザーに尋ねて、別タスクでターゲットになったホストに対してだけさらに別タスクを実行、といった応用が利く。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sun, 16 Nov 2014 18:45:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2014-11-16:/2014/11/16/fabric-multiple-result.html</guid><category>Fabric</category><category>Python</category></item><item><title>Xcode 6に付属しているSwiftのREPLを使う</title><link>http://raimon49.github.io/2014/11/12/xcode-swift-repl.html</link><description>&lt;p&gt;Xcode 6にはSwiftのREPLが付属しておりターミナル上で簡単に動作を試せる。&lt;/p&gt;
&lt;h2&gt;起動方法&lt;/h2&gt;
&lt;p&gt;AppleのSwift Blogに紹介エントリがあって知ったのだが、Xcode 6にはSwiftのREPLが付属しており、次のように &lt;code&gt;swift&lt;/code&gt; コマンドで起動できる。正確にはOS X Yosemiteの場合は &lt;code&gt;swift&lt;/code&gt; と打ち、OS X Mavericksでは &lt;code&gt;xcrun swift&lt;/code&gt; と打つ。&lt;/p&gt;
&lt;p&gt;起動すると、番号付きのプロンプトが現れて入力待ちのループに入る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Yosemite&lt;/span&gt;
$ swift

&lt;span class="c1"&gt;# Mavericks&lt;/span&gt;
$ xcrun swift

Welcome to Swift version &lt;span class="m"&gt;1&lt;/span&gt;.1 &lt;span class="o"&gt;(&lt;/span&gt;swift-600.0.20.0&lt;span class="o"&gt;)&lt;/span&gt;. Type :help &lt;span class="k"&gt;for&lt;/span&gt; assistance.
  &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt; println&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, world!!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Hello, world!!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;REPLとしては良くできていて、入力の途中で &lt;code&gt;Tab&lt;/code&gt; キーを押せば豊富な補完候補が表示される。&lt;/p&gt;
&lt;p&gt;また、いかにも型付きのプログラミング言語らしく、&lt;code&gt;var&lt;/code&gt; や &lt;code&gt;let&lt;/code&gt; といったキーワードで宣言した変数でも、きちんと代入された値の型に応じてメソッドなどが補完される。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import Foundation&lt;/code&gt; は通るが &lt;code&gt;import UIKit&lt;/code&gt; はエラーとなってしまった。&lt;/p&gt;
&lt;h2&gt;参考情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/swift/blog/?id=18" title="Introduction to the Swift REPL - Swift Blog - Apple Developer"&gt;Introduction to the Swift REPL - Swift Blog - Apple Developer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Wed, 12 Nov 2014 23:45:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2014-11-12:/2014/11/12/xcode-swift-repl.html</guid><category>Mac</category><category>Swift</category><category>Xcode</category></item><item><title>zshでファイル名グロブを展開した後にアンドゥできる事を知った</title><link>http://raimon49.github.io/2014/11/11/zsh-undo-key-binding.html</link><description>&lt;p&gt;zshでファイル名グロブの記号をTabキー展開した後に記号に戻す方法があった。&lt;/p&gt;
&lt;p&gt;一度展開してしまうと戻せないものだと思い込んでいたが違った。&lt;/p&gt;
&lt;h2&gt;結論&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Ctrl+x&lt;/code&gt; - &lt;code&gt;u&lt;/code&gt; でと入力してアンドゥ操作することで直前の記号に戻る。&lt;/p&gt;
&lt;h2&gt;詳細&lt;/h2&gt;
&lt;p&gt;zshで次のように入力した状態で、 &lt;code&gt;Tab&lt;/code&gt; キーを押すと、コマンド実行前に記号がマッチするファイルが展開される。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Tabキーを押す&lt;/span&gt;
$ ls *user.js

&lt;span class="c1"&gt;# 展開される&lt;/span&gt;
$ ls feedburner_tracking_cutter.user.js
feedburner_tracking_cutter.user.js  minimum_scroll.user.js              show_yahoo_news_detail_p.user.js
ldc_rancor_cool.user.js             read_two_ahead_feed_on_ldr.user.js  wikipedia_redirect_keyword.user.js
ldr_auto_expand_all_rating.user.js  show_time_on_ldr.user.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;展開された後に、元の記号に戻したい事が多々あって、どうやるのか知らなかったのだけど、アンドゥ操作で戻せるのだった。&lt;/p&gt;
&lt;p&gt;アンドゥはEmacsキーバインドを設定している場合、先述した &lt;code&gt;Ctrl+x&lt;/code&gt; - &lt;code&gt;u&lt;/code&gt; と入力する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Ctrl+x - uと押す&lt;/span&gt;
$ ls feedburner_tracking_cutter.user.js
feedburner_tracking_cutter.user.js  minimum_scroll.user.js              show_yahoo_news_detail_p.user.js
ldc_rancor_cool.user.js             read_two_ahead_feed_on_ldr.user.js  wikipedia_redirect_keyword.user.js
ldr_auto_expand_all_rating.user.js  show_time_on_ldr.user.js

&lt;span class="c1"&gt;# 元に戻った&lt;/span&gt;
$ ls *user.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみに、名前の通りアンドゥなので、連続的に &lt;code&gt;Ctrl+x&lt;/code&gt; - &lt;code&gt;u&lt;/code&gt; を押すと、入力した文字がどんどん消えて行く。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# さらに戻る&lt;/span&gt;
$ ls *user.j

&lt;span class="c1"&gt;# さらに戻る&lt;/span&gt;
$ ls *user.
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Tue, 11 Nov 2014 18:45:00 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2014-11-11:/2014/11/11/zsh-undo-key-binding.html</guid><category>zsh</category></item><item><title>pipのrequirements.txtについて</title><link>http://raimon49.github.io/2014/11/10/requirements-text-file.html</link><description>&lt;p&gt;Pythonのパッケージ管理ツールpipで利用できる &lt;code&gt;requirements.txt&lt;/code&gt; の仕様について。&lt;/p&gt;
&lt;h2&gt;保存&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pip freeze&lt;/code&gt; コマンドで標準出力に書き出された内容をファイルに保存しておくと、後でそれを使ってPyPIでホスティングされているPythonパッケージ各種を復元インストールができる。&lt;/p&gt;
&lt;p&gt;virtualenv環境で現在インストールされているパッケージを外部ファイルに書き出すには、以下のように &lt;code&gt;-l&lt;/code&gt; オプションを指定する。&lt;/p&gt;
&lt;p&gt;ファイル名は慣例的に &lt;code&gt;requirements.txt&lt;/code&gt; が使われる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip freeze -l &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;復元&lt;/h2&gt;
&lt;p&gt;この保存した内容を元にvirtualenv環境で復元するには &lt;code&gt;-r&lt;/code&gt; オプションで指定する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -r requirements.txt
Successfully installed Fabric Jinja2 Markdown MarkupSafe Pygments Unidecode blinker docutils ecdsa feedgenerator ghp-import paramiko pelican pycrypto python-dateutil pytz six
Cleaning up...
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考情報&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pip.readthedocs.org/en/latest/user_guide.html" title="User Guide — pip 1.5.6 documentation"&gt;User Guide — pip 1.5.6 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Mon, 10 Nov 2014 23:43:37 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2014-11-10:/2014/11/10/requirements-text-file.html</guid><category>Python</category></item><item><title>技術ブログを静的ページジェネレータPelicanで始めることにした</title><link>http://raimon49.github.io/2014/11/09/start-tech-blog-by-pelican.html</link><description>&lt;p&gt;技術ブログを静的ページジェネレータPelicanで始めることにしたのでセットアップ手順のメモとかを残す。&lt;/p&gt;
&lt;h2&gt;2015-04-19追記&lt;/h2&gt;
&lt;p&gt;最新のセットアップ手順は、このブログ自身の&lt;a href="https://github.com/raimon49/raimon49.github.io/blob/source/README.md"&gt;リポジトリトップに置いてあるREADME.md&lt;/a&gt;に簡潔にまとめてある。&lt;/p&gt;
&lt;h2&gt;動機&lt;/h2&gt;
&lt;p&gt;もともとウェブ日記ツール&lt;a href="http://www.tdiary.org/"&gt;tDiary&lt;/a&gt;を使ってプログラミング系の記事も書いていたのだけど、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;シンタックスハイライトがしんどい&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/google-code-prettify/"&gt;google-code-prettify&lt;/a&gt;で色付けしているのだが、やはりJavaScriptではしんどい&lt;/li&gt;
&lt;li&gt;プログラミング言語のサポートも貧弱なので、やはりこの分野ではデファクトスタンダードな&lt;a href="http://pygments.org/"&gt;pygments&lt;/a&gt;が使いたい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;プログラミングネタはMarkdownで書きたい&lt;ul&gt;
&lt;li&gt;tDiaryにもMarkdownで書く設定があるが、違う道具も使ってみたかった&lt;/li&gt;
&lt;li&gt;ファイル名 &lt;code&gt;*.md&lt;/code&gt; だと使い慣れてるVimでサクサクと書けるので是非やりたい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった理由により、GitHub Pagesにホスティングして別ブログを始めたいと考えた。&lt;/p&gt;
&lt;h2&gt;GitHub Pagesの準備&lt;/h2&gt;
&lt;p&gt;あらかじめGitHub側に &lt;code&gt;{username}.github.io.git&lt;/code&gt; という名前のリポジトリを作っておく。&lt;/p&gt;
&lt;p&gt;手元に持って来て、ここを作業ディレクトリにする。GitHub Pagesとして公開するページとPelican作業用ディレクトリとで内容が一致できないので、 &lt;code&gt;source&lt;/code&gt; というブランチで公開ページの元となるMarkdownファイルを管理して行く事にした。これが正しいやり方なのか良く分からない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git@github.com:raimon49/raimon49.github.io.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; raimon49.github.io
$ git checkout -b &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pelican環境のセットアップ&lt;/h2&gt;
&lt;p&gt;以下のページを参考にPelican 3.5.0の環境をセットアップした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/3.5.0/"&gt;Pelican 3.5.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.sotm.jp/2014/01/04/Pelican-Markdown-GithubPages-install-guide/" title="Pelican + Markdown + GitHub Pagesで管理するブログの作り方 - blog@sotm.jp"&gt;Pelican + Markdown + GitHub Pagesで管理するブログの作り方 - blog@sotm.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まずPython 2.7系でPelican用のvirtualenv環境を作る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv virtualenv &lt;span class="m"&gt;2&lt;/span&gt;.7.8 venv-2.7.8-pelican
$ pyenv &lt;span class="nb"&gt;local&lt;/span&gt; venv-2.7.8-pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;依存するパッケージのインストール。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Makefile&lt;/code&gt; と一緒に &lt;code&gt;fabfile.py&lt;/code&gt; も作ってくれるらしいので、Fabricも入れてみることにした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pelican markdown fabric
$ pip list
blinker &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.3&lt;span class="o"&gt;)&lt;/span&gt;
docutils &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.12&lt;span class="o"&gt;)&lt;/span&gt;
ecdsa &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.11&lt;span class="o"&gt;)&lt;/span&gt;
Fabric &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.10.0&lt;span class="o"&gt;)&lt;/span&gt;
feedgenerator &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.7&lt;span class="o"&gt;)&lt;/span&gt;
Jinja2 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.3&lt;span class="o"&gt;)&lt;/span&gt;
Markdown &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.5.1&lt;span class="o"&gt;)&lt;/span&gt;
MarkupSafe &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.23&lt;span class="o"&gt;)&lt;/span&gt;
paramiko &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.15.1&lt;span class="o"&gt;)&lt;/span&gt;
pelican &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.5.0&lt;span class="o"&gt;)&lt;/span&gt;
pip &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.5.6&lt;span class="o"&gt;)&lt;/span&gt;
pycrypto &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.6.1&lt;span class="o"&gt;)&lt;/span&gt;
Pygments &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.6&lt;span class="o"&gt;)&lt;/span&gt;
python-dateutil &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.2&lt;span class="o"&gt;)&lt;/span&gt;
pytz &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2014&lt;/span&gt;.9&lt;span class="o"&gt;)&lt;/span&gt;
setuptools &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6&lt;span class="o"&gt;)&lt;/span&gt;
six &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.8.0&lt;span class="o"&gt;)&lt;/span&gt;
Unidecode &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.04.16&lt;span class="o"&gt;)&lt;/span&gt;
wsgiref &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.1.2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;pelican-quickstart&lt;/code&gt; というコマンドで質問に答えてテンプレートを生成する。&lt;/p&gt;
&lt;p&gt;ほとんどデフォルトの回答にした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican-quickstart
Welcome to pelican-quickstart v3.5.0.

This script will &lt;span class="nb"&gt;help&lt;/span&gt; you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt; .
&amp;gt; What will be the title of this web site? Steel Dragon &lt;span class="m"&gt;14106&lt;/span&gt;
&amp;gt; Who will be the author of this web site? raimon
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; ja
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; http://raimon49.github.io
&amp;gt; Do you want to &lt;span class="nb"&gt;enable&lt;/span&gt; article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
Done. Your new project is available at /home/raimon49/works/git/raimon49.github.io
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生成された &lt;code&gt;pelicanconf.py&lt;/code&gt; というファイルを自分用に編集する。&lt;/p&gt;
&lt;p&gt;変更・追加したのは以下の辺り。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Atom/RSS Feedの生成に必要&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://raimon49.github.io&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# SITEURLが指定されているとローカルサーバでもリンクに使われてしまうので&lt;/span&gt;
&lt;span class="c1"&gt;# ローカルサーバのプレビュー時は相対リンクするように指定&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# SITEURL/YYYY/MM/DD/Markdown fileというルールでURLを発行&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;}/{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;}/{slug}.html&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# ブログ記事の日付フォーマットを指定&lt;/span&gt;
&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Asia/Tokyo&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;DATE_FORMATS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%a, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; %b %Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;ja&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;(%a)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# ブログのデザインテーマを指定（後述）&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./vendor/pelican-sober&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# ブログのRSSフィードを全文配信&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/all.rss.xml&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Social widget&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GitHub&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com/raimon49&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://twitter.com/raimon49&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Last.fm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://www.lastfm.jp/user/raimon_49&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Website&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://sangoukan.xrea.jp/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ブログのデザインテーマは &lt;code&gt;pelican-themes&lt;/code&gt; というコマンドラインツールを使って管理できるみたいだけど、まぁ気に入ったものをGitHubから持って来て使えば途中で変更することも無いかなと考えて、submoduleとして追加して参照することにした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule add git://github.com/fle/pelican-sober.git vendor/pelican-sober
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ブログ記事の投稿とページ生成&lt;/h2&gt;
&lt;p&gt;後は &lt;code&gt;content/blog-title.md&lt;/code&gt; みたいな感じで好きなテキストエディタで記事を書けば良いようだ。&lt;/p&gt;
&lt;p&gt;記事に埋め込むメタデータについては&lt;a href="http://docs.getpelican.com/en/3.5.0/content.html"&gt;Writing content&lt;/a&gt;の章を参考にする。&lt;/p&gt;
&lt;p&gt;HTMLの生成とローカルサーバでの確認は &lt;code&gt;Makefile&lt;/code&gt; または &lt;code&gt;fabfile.py&lt;/code&gt; を利用すると簡単。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make html
$ make serve

$ fab build
$ fab serve

&lt;span class="c1"&gt;# 2つをまとめてやってくれる&lt;/span&gt;
$ fab reserve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ローカルでの確認が終わったら&lt;a href="http://docs.getpelican.com/en/3.5.0/tips.html"&gt;Tips - Publishing to GitHub&lt;/a&gt;を参考にGitHub Pagesに記事をpushする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fab rebuild
&lt;span class="o"&gt;[&lt;/span&gt;localhost&lt;span class="o"&gt;]&lt;/span&gt; local: rm -rf output
&lt;span class="o"&gt;[&lt;/span&gt;localhost&lt;span class="o"&gt;]&lt;/span&gt; local: mkdir output
&lt;span class="o"&gt;[&lt;/span&gt;localhost&lt;span class="o"&gt;]&lt;/span&gt; local: pelican -s pelicanconf.py
Done: Processed &lt;span class="m"&gt;1&lt;/span&gt; article&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt; draft&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; and &lt;span class="m"&gt;0&lt;/span&gt; page&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; in &lt;span class="m"&gt;0&lt;/span&gt;.15 seconds.

&lt;span class="c1"&gt;# 現在のoutputディレクトリの内容をgh-pagesというローカルブランチに反映する&lt;/span&gt;
$ pip install ghp-import
$ ghp-import output

&lt;span class="c1"&gt;# コミットされた内容をリモートpushする&lt;/span&gt;
$ git checkout gh-pages
$ git push -f origin gh-pages:master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;ghp-import -b master&lt;/code&gt; みたいにブランチ名を指定した方が楽かもしれない。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;source&lt;/code&gt; ブランチと &lt;code&gt;master&lt;/code&gt; ブランチは全く別の歴史を持って行くので混ぜるな危険な感じになってしまった。記事生成元データは別リポジトリとして管理する方がベターなのかな。&lt;/p&gt;
&lt;p&gt;よって更新手順としては以下のようなフローとなる&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# sourceブランチで記事を編集&lt;/span&gt;
$ git checkout &lt;span class="nb"&gt;source&lt;/span&gt;
$ vim content/blog/2014/11/09/start-tech-blog-by-pelican.md
$ git commit -a
$ git push origin &lt;span class="nb"&gt;source&lt;/span&gt;

&lt;span class="c1"&gt;# GitHub Pagesに反映&lt;/span&gt;
$ fab rebuild
$ ghp-import
$ git checkout gh-pages
$ git push gh-pages:master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ローカルブランチを切り替えるのは面倒なので、この辺はコミットフックを使って自動化するのが良いかも知れない。&lt;/p&gt;
&lt;p&gt;はてなスターとか設置したいんだけど今日は疲れたのでこれまで。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">raimon</dc:creator><pubDate>Sun, 09 Nov 2014 18:44:37 +0900</pubDate><guid isPermaLink="false">tag:raimon49.github.io,2014-11-09:/2014/11/09/start-tech-blog-by-pelican.html</guid><category>GitHub</category><category>Pelican</category><category>Python</category></item></channel></rss>